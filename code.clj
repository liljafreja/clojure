; Given a list of integers, create a function that returns the highest product between three of those numbers.
; For example, given the list [1, 10, 2, 6, 5, 3], the highest product would be 10 * 6 * 5 = 300

; There are 3 cases:
; 1 positive, rest negative: take two smallest and highest
; 2 positive, rest negative: take the three smallest
; 3 positive: Max(two smallest and highest, three heighest)

(defn highest-product-of-three [numbers]
  (let [sorted (sort numbers)
        top-three (take-last 3 sorted)
        bottom-three (take 3 sorted)
        bottom-two (take 2 sorted)
        last (last sorted)]
    (max
      (reduce * top-three)
      (reduce * bottom-three)
      (* (apply * bottom-two) last)
)))



(println (highest-product-of-three [1, 10, 2, 6, 5, 3])) ; prints true
(println (highest-product-of-three [-10, -10, 5, 2, 0])) ; prints 500
(println (highest-product-of-three [-10, -10, -5, -2, -2]))
(println (highest-product-of-three [-10, -10, -5, -1, 0, 1, 1]))
(println (highest-product-of-three [-10, -10,-10, -10,-10, -10,-10, -10,-10, -10,-10, -10 0 10])) 

;a lot of autogenerated tests to check if the implementation matches brute force python

(println (= (highest-product-of-three [-80, -10, 20, -41, -79, -15, -2, 19, 15, 64, -88, -18, -63, -68, 68, -35, -14, -83, 81, -84, -7, -53, -26, 61]) 598752))
(println (= (highest-product-of-three [34, -71, -13, 8, 90, -21, -26, 96, 73, -28, -92, -26, 97, -89, 31, 31, 29, -18, -98, -35, 1, 32, -19, 41]) 874552))
(println (= (highest-product-of-three [-58, 9, -20, -80, 84, -63, 7, -49, -40, 86, -63]) 433440))
(println (= (highest-product-of-three [-42, 37, -88, 43, 0, 79, 5, 69, 10, -90, 28, 91, -36, 23, -27, 60, 10]) 720720))
(println (= (highest-product-of-three [57, -89, 43, -72, 66, -80, -95, -59, 31, 16, 72, 58, 58, -76, 67, -31, 11, -27, -91]) 622440))
(println (= (highest-product-of-three [-45, -98, -70, -60, -100, 49, -97, -39, 63, -27, 64, -76, 37, 72, 64, -68, -23, 94, -61, 9, 84, -83, -84, 5, 6, -64]) 921200))
(println (= (highest-product-of-three [79, -90, 4, 38, -24, -28, 77, -11, 51, 0, -76, -75, -78, -61, 74, 51, -48, 16, -83, -48, -39, -75, 20, -28, 35, -67, -87, -31, 38]) 618570))
(println (= (highest-product-of-three [3, 18, 13, 55, 43, -99, 2, 19, 35, -47, 83, -5, -90, 80, -95, 83, 83, -15, -50, 18]) 780615))
(println (= (highest-product-of-three [98, -1, 53, 13, -55, -89, 5, 53, 15, 29, -28, -87]) 758814))
(println (= (highest-product-of-three [-89, 61, 90, 28, -2, -87, 44, -20, -20, -62, -62, -49, 85, 42, 41, 85]) 696870))
(println (= (highest-product-of-three [31, 7, 69, -77, -73, 55, -13, -65, -64, -68, -92, -36]) 488796))
(println (= (highest-product-of-three [44, -64, -75, -75, -93, -63, 98, -83, 0, -14, 82, 5]) 756462))
(println (= (highest-product-of-three [93, 30, 30, 98, -63, -76, -80, -49, -4, 95, -68, -86, 51, -92, 34, -15, -55, -49, 5, -80, -35, -56, -87, 9, 99, -77]) 921690))
(println (= (highest-product-of-three [-33, -90, 83, 45, 56, -7, 48, 44, 84, -55, -69, 96, -71, -52, 14, 61, 2, 42, -41, 93, -12, 79, 45, 43]) 749952))
(println (= (highest-product-of-three [-58, -13, 84, 54, 64, -25, -71, -52, -82, 55, -31, -48, -78, -7]) 537264))
(println (= (highest-product-of-three [16, -10, 51, -4, 73, -45, -3, -4, 98, -98, -14, -49, 92, 20]) 658168))
(println (= (highest-product-of-three [61, -82, 9, 28, 38, 3, 59, 90, 35, -1]) 323910))
(println (= (highest-product-of-three [81, 40, -74, 89]) 288360))
(println (= (highest-product-of-three [90, 43, -69, 9, 37, -66, -42, 77, -30, -77, 57, 5, -75, 34]) 519750))
(println (= (highest-product-of-three [9, -60, -34, 11, -30, 68, 94, 83, -86, -59, -22, 80, -54, -85, -9, 69, -55, -97, -76, 93, 54, -5, 18, 76, 99]) 865458))
(println (= (highest-product-of-three [1, -73, -8, 88, 97, -52, -98, -67, -96, -85, -40, 34, 89, -41, -30]) 912576))
(println (= (highest-product-of-three [-52, -39, -95, 22, 32, -61, 28, 74, 35, -58, 59, -68, 53, 84, -48, -12, -100]) 798000))
(println (= (highest-product-of-three [-44, 15, 18]) -11880))
(println (= (highest-product-of-three [-56, 10, -69, 16, 0, 59, -53, -82, 97, -33, 43, 44, 74, -26, 57, -42, 0, 31, -26, 29, 99, -31, -43, 9, 24, -55, -84, -79]) 710622))
(println (= (highest-product-of-three [19, -43, -61, -78, 76, -1, -7, -76, 79, -57, 40, 13, 67]) 468312))
(println (= (highest-product-of-three [-69, -61, -48, -41, 71, 87, -88]) 528264))
(println (= (highest-product-of-three [63, -72, 69, 51, -95, 37, -21, -20, -57, 98, 96, -57, -100, 69, 70, 18, 68, -65, 93, 33, 0]) 931000))
(println (= (highest-product-of-three [95, 36, -99, 3, 57, 37, 73, 50, -90, -21, -56, 83, 0, -81, 36, -2, -69, -99, 18, -85, -78, 40, -96, -70, 25, -72]) 931095))
(println (= (highest-product-of-three [-65, 43, -57, -59, 21, -71, 88, -87, 40, 90, 16, 80, 39]) 633600))
(println (= (highest-product-of-three [48, -45, -45]) 97200))
(println (= (highest-product-of-three [-69, 73, -25, 88, -100, -82, -2, -2, -75, -55, -31, -30, -62, -65, 45, 97, -39, -17, 1, 72, 51, 58, -4, -40, 73, -91, -96]) 931200))
(println (= (highest-product-of-three [-11, -44, 12, 23]) 11132))
(println (= (highest-product-of-three [-36, 32, 73, 52, -96, -81, -73, -73, 15, 22, -5, 16, -95, 34, -5, -15, 7, 93, 43, -40, -98]) 874944))
(println (= (highest-product-of-three [-74, -54, 98, 17, 67, -73, 31, -18, -81, 1, -51, 19, -13, -25, 79, -56, 32, -9, -27, 22]) 587412))
(println (= (highest-product-of-three [73, -4, -8, 46, -48, 97, -79, -13, 99, 26, -16, 16, -95, 24, -82, -72, 83, 33, 40, -49, -5, -38, -100]) 940500))
(println (= (highest-product-of-three [-70, 79, 94, -16, -36, 15, 71, 32, -1, 15, 74, 27, -55, -72, 94, 40, 93, 31, -89, 55, -39, 15, -81, -76, -25, -12, -14]) 821748))
(println (= (highest-product-of-three [-11, -61, 28, 9, 40, -84, 40, 57, -62, -81, 62, 13, 57, 2, -13, -66, -48, -59, 63, 35, 42, -34, 90, 75, -55, 64]) 612360))
(println (= (highest-product-of-three [-35, -22, -52, -86, 43, 86, -94, -77, 54, -45, -77, -18, 68, -51, -88, -3, -81, 58, 47, 97, -2, -14, -92, -65, 89, -58, 12, -38]) 838856))
(println (= (highest-product-of-three [-49, -12, -25, -89, 26, -94, -57, -54, -73, -33, 66, -43]) 552156))
(println (= (highest-product-of-three [35, 36, -61, -61, -56, -91, -58, -79, -51]) 258804))
(println (= (highest-product-of-three [34, -2, 95, -68, 63, -91, 43, 16]) 587860))
(println (= (highest-product-of-three [65, -8, 68, -67, -36, -18, 84, 38, 72, -9, 27, 26, -21, -75]) 422100))
(println (= (highest-product-of-three [23, 24, 29, 30, -96, -44, -98]) 282240))
(println (= (highest-product-of-three [28, -54, 38, 62, 92, 19, 67, -55, 30, -53, -74, -77, 76, -87, 21, 10, 88, -85, -57, 91]) 736736))
(println (= (highest-product-of-three [75, 92, -17]) -117300))
(println (= (highest-product-of-three [83, -35, -25, -92, -36, -94, -71, -64, 57, -33, 52, 5, 63, 54, -11, -35, -17, -86, 86, -49, 88]) 761024))
(println (= (highest-product-of-three [-94, 90, 29, -98, -11, 86, 87, 94, -20, 61, -93, -18, -72]) 865928))
(println (= (highest-product-of-three [-13, 4, -30, -73, -38, -34, -88, 97, 42, -81, 59, 22, 58, 92, -45, 40, 57, -58, 71, 74, -59, 82, 64, -76]) 731768))
(println (= (highest-product-of-three [-39, -39, 32, -94, -29, 32, -21, -75, -49, 17, -95, -65, 98, -26, 12, -73, 7, 84, -23]) 875140))
(println (= (highest-product-of-three [-44, -59, 8, -71, 94, -54, 12, -47]) 393766))
(println (= (highest-product-of-three [-89, 9, 22, 65, -1, 44, -83, 20, -75, 83, 83, -80, -32, 62, 95, -13, -54, 60, 15, -97, -33, -95, 31, 6, -77, -64, 54, -1, -86]) 875425))
(println (= (highest-product-of-three [-87, 62, 70]) -377580))
(println (= (highest-product-of-three [7, -57, 31, -68, -100, 84, 83, 64, 43, 79, 17, -4, -75, 93]) 697500))
(println (= (highest-product-of-three [-35, 13, 26, -8, -61, -83, 10, -95]) 205010))
(println (= (highest-product-of-three [-82, -78, -24, 58, 88, 94, 27, 80, -21, -22, -8, -46, 86, 72, -70, -2, -53, -76, -34, -61]) 711392))
(println (= (highest-product-of-three [-49, 26, -24, -89, 80, -63, -82, 34, 9, 3, -13, 64, 17, -88, -96, -34, 58, -10, 8, -2, 51]) 683520))
(println (= (highest-product-of-three [68, -39, -94, 69, 52, -54, -44, 40, -97, 34, -1, 69, -51, 49, -89, -60, 64, -94, 71]) 647378))
(println (= (highest-product-of-three [-61, 8, 2, 38]) 608))
(println (= (highest-product-of-three [49, -12, 86, -6, -84, 52, -12, -45, 71, -96, 74, 92, 72, -97, -51, 88, 92, -88, 26, -22, -86, 47, -43, -71]) 856704))
(println (= (highest-product-of-three [-97, -30, 1, -32]) 3104))
(println (= (highest-product-of-three [59, 79, 27, 81, -79, -32, 40, -56, 78, 73, 39, -20, 6, 0, 29, -42, 87]) 556713))
(println (= (highest-product-of-three [-25, 22, -39, 8, -14, 94]) 91650))
(println (= (highest-product-of-three [24, 89, -91, 67, -87, -3, -6, -88, -10, -42, -46, 99, 76]) 792792))
(println (= (highest-product-of-three [97, 7, -70, -95]) 645050))
(println (= (highest-product-of-three [-4, -46, -82, 75, 64, 74, 55, 79, -3, -76, 66, -71, 53, -96]) 621888))
(println (= (highest-product-of-three [82, -90, 20, -40, 48, -82, 76, 42, -45, 65, 55, -15, 21, -27, 97, -26, 47, -63, -32, -42, 80, 31, 47, -43, -16, -46, 54, 95]) 755630))
(println (= (highest-product-of-three [-43, 72, -88, 87, 56, -68, -80, -96, -34, -7, -69, -40, -54, -59, 0, 71]) 734976))
(println (= (highest-product-of-three [-22, -83, 2, -77, -36, 10]) 63910))
(println (= (highest-product-of-three [22, -30, -82, 23]) 56580))
(println (= (highest-product-of-three [-84, 90, -1, 26, 67, 72, 50, 43, -33, 19, 19, -29, -98, 82]) 740880))
(println (= (highest-product-of-three [-84, 17, 76, -60, -5, -94, -73, -17, -67, 85, 90, 82, 83, -37, 21, -57, 25, 30, -15, -87]) 736020))
(println (= (highest-product-of-three [71, 39, 90, 13, 72, 20, -39, 69, 63, 37, -27, 59, -78, 63, -17, 98, 14, -31, 56, 10, -76, -41]) 635040))
(println (= (highest-product-of-three [-63, 27, 91, -21, -50, 30]) 286650))
(println (= (highest-product-of-three [51, -34, 67, 56]) 191352))
(println (= (highest-product-of-three [-97, 42, -53, 76, 99, 93, -66, -58, -76, 86]) 791802))
(println (= (highest-product-of-three [-81, 85, 13, 92, 23, -26, -31, 88, 67, -62, -28, 48, -99, 94, -99, 81, -19, 13, -69, -86]) 921294))
(println (= (highest-product-of-three [3, 98, -16, -90, 9, -56, -73, -29, 80, 87, 94, 43, 32, 97, 87, 17, -44, 40, -53, -79, -26, -89, -34, 67, 48, 82, 22]) 893564))
(println (= (highest-product-of-three [-81, -61, 9, 35, 55, -4, -86, -99, -26, -62, 76, -52]) 647064))
(println (= (highest-product-of-three [77, 12, 10, 64, 71, -78, -62, -72]) 432432))
(println (= (highest-product-of-three [-42, -73, -85, 88, 9, 35]) 546040))
(println (= (highest-product-of-three [98, 88, 99, 1, -47, -51, -81, -13, -60, -10, -3, 49]) 853776))
(println (= (highest-product-of-three [23, -35, -17, -69, 57, 16, -7, 23, 34, -80, 21]) 314640))
(println (= (highest-product-of-three [-60, -5, 52, 37, -79, 65, 13, -91, -32, 32, 80, 17, -10, -65, -29, -38, 88, 68, -1, 85]) 632632))
(println (= (highest-product-of-three [-20, 57, 45, -11, 58, -82, 54, 33, 17, -13, -13, 26, -69, -85, 29, -95, 44, 17]) 468350))
(println (= (highest-product-of-three [-33, 47, -55, -87, 91]) 435435))
(println (= (highest-product-of-three [76, 65, -72, -25, 54]) 266760))
(println (= (highest-product-of-three [-86, 20, 98, 32, 23, -93, 24, 23, 40, -26, -38, 72, 84, -33, 8, -19, 49, 41, 88, 67, 34, 88, -1]) 783804))
(println (= (highest-product-of-three [90, 58, 97, 33, 13, 72, -39, 77, -75, -4, -11, -84, -40, -93, 99, 93, -74, -20, -9, -20, 63, -87, 40, 29, -49]) 893079))
(println (= (highest-product-of-three [-71, 27, 52, 91, 15, 79, -66, -40, 89, 42]) 639821))
(println (= (highest-product-of-three [13, -6, 77, 80, 73]) 449680))
(println (= (highest-product-of-three [-68, -38, -50, 3, -99]) 20196))
(println (= (highest-product-of-three [29, -70, -46, -32, 75, 82, -36, -9, -32, 36, -81, -91, 4, 78, -95, 59, -30, 33, -3, 96, 44, -45]) 829920))
(println (= (highest-product-of-three [25, -33, -22, 88, 88, 9, 73, -20, -87, 90, 80, -74, 62, -67, -5, -93, 24, -80, -18, 87, 1, -77, 92, 98, 7, 66, 95, -72, 83]) 856520))
(println (= (highest-product-of-three [48, -80, -13, -17, -46, 66, 98, -17, -48, -69, -95, 88, 12, 81, -71, 85, 21, -29, -15, -20, -29, -76, 47]) 744800))
(println (= (highest-product-of-three [8, -73, -82, -87, -66, 11, 81, 94, -72, 45, -14, -35, 6, -74, 62, -46, 9, -1, -47, -29, 51]) 670596))
(println (= (highest-product-of-three [-78, 27, 99, 85, -93, -63, -72]) 718146))
(println (= (highest-product-of-three [4, -29, 77, -19, -27, 97, -52, -25, -93, -58]) 523218))
(println (= (highest-product-of-three [-53, -96, 38, -31, 96, 10, -29, -16, 58, 9, -3, 94, -5, 94, -43, 63, -72]) 848256))
(println (= (highest-product-of-three [40, -55, 25, 96, 99, -89, 6]) 484605))
(println (= (highest-product-of-three [-78, 99, -53, 62, -61, 47, -59, 28, 81, -23, -64, 55, -3, 3, -47, -9, 58, -72, 82, 89, 18]) 722502))
(println (= (highest-product-of-three [-3, 3, -2, 5, -4, -1]) 60))
(println (= (highest-product-of-three [-10, 1, -8, 8, 0, -5, -1, 3, -5]) 640))
(println (= (highest-product-of-three [9, -9, 2, -6]) 486))
(println (= (highest-product-of-three [1, -8, 5, -9]) 360))
(println (= (highest-product-of-three [0, -9, -9, 4, 7, -4, -1]) 567))
(println (= (highest-product-of-three [7, -5, 5]) -175))
(println (= (highest-product-of-three [-5, 9, 5, -1, -2, -5]) 225))
(println (= (highest-product-of-three [3, 5, 5, -9, 0, 4, -9, -10]) 450))
(println (= (highest-product-of-three [-5, -8, -3, -2, -3, -4, -2, 7]) 280))
(println (= (highest-product-of-three [7, 8, -10, -6, -9, -3, 8, -4, 3]) 720))
(println (= (highest-product-of-three [-9, -8, -7, -9]) -504))
(println (= (highest-product-of-three [-6, -3, 6, -8, 4, -7, -9, 9, -2]) 648))
(println (= (highest-product-of-three [-2, 8, 1, -8, -1, -9, -7]) 576))
(println (= (highest-product-of-three [8, 5, -8, 6]) 240))
(println (= (highest-product-of-three [-2, 4, 7, 2, -10, 3, 1]) 140))
(println (= (highest-product-of-three [-1, -5, 8, -9]) 360))
(println (= (highest-product-of-three [-2, 7, -4, -4, -5, -1, -9, 2, 6]) 315))
(println (= (highest-product-of-three [1, 1, -1, -1]) 1))
(println (= (highest-product-of-three [9, 9, -7, -6, 4]) 378))
(println (= (highest-product-of-three [-3, 1, -1]) 3))
(println (= (highest-product-of-three [-6, 5, 5, 9]) 225))
(println (= (highest-product-of-three [-2, 1, -7]) 14))
(println (= (highest-product-of-three [2, 8, -1, 4, -2, -7, 8, 9, -10]) 630))
(println (= (highest-product-of-three [-6, -2, -8, -1]) -12))
(println (= (highest-product-of-three [-9, 2, 2, 8]) 32))
(println (= (highest-product-of-three [6, 3, -6, 1, 7, 3]) 126))
(println (= (highest-product-of-three [1, -4, -5, -6, -6, 1, -5]) 36))
(println (= (highest-product-of-three [2, -8, 7, 5, 7]) 245))
(println (= (highest-product-of-three [2, 1, 9, 8, 5, 2, 5, -4]) 360))
(println (= (highest-product-of-three [-9, 8, -7, -8, 1, 0, 4, -2, 0]) 576))
(println (= (highest-product-of-three [5, -7, -5, -9, 1, 9, -4, -3, -1]) 567))
(println (= (highest-product-of-three [9, 3, -2, 9]) 243))
(println (= (highest-product-of-three [4, -3, 5, 7, -5, -7, -2, 9, 2]) 315))
(println (= (highest-product-of-three [-3, 9, -1, -3, -2, -8]) 216))
(println (= (highest-product-of-three [9, -6, 2]) -108))
(println (= (highest-product-of-three [-3, -5, 1, 2, -6, 3, -9, 5, 7]) 378))
(println (= (highest-product-of-three [7, 1, -5, 3, 8, 6, -9]) 360))
(println (= (highest-product-of-three [5, -7, -9, -10, 6, 3, -8, -8]) 540))
(println (= (highest-product-of-three [2, -9, -9, 9, 6, 8]) 729))
(println (= (highest-product-of-three [7, -9, -1, -3, -6]) 378))
(println (= (highest-product-of-three [-10, -7, 1, 2, 0, -3, -10]) 200))
(println (= (highest-product-of-three [-2, -4, 4, -2, 9]) 72))
(println (= (highest-product-of-three [-6, -9, 0, -8, 6, -2, -5, -3]) 432))
(println (= (highest-product-of-three [7, -9, 0, 7, -3]) 189))
(println (= (highest-product-of-three [-8, -4, -9, 5, -3, 8, -9, -7, -1]) 648))
(println (= (highest-product-of-three [-5, -8, -10, 0, 0]) 0))
(println (= (highest-product-of-three [9, 8, -5, -3]) 135))
(println (= (highest-product-of-three [-8, -7, -7, -10, 4, 7]) 560))
(println (= (highest-product-of-three [-4, 0, 1, 7, -7, -9, 8, 2]) 504))
(println (= (highest-product-of-three [0, -8, -2, -1, 0, 4, 1]) 64))
(println (= (highest-product-of-three [9, -9, -4, 9, -3, -7, 1, 0]) 567))
(println (= (highest-product-of-three [-9, -2, -1, 3, 2, 2, 2, -7, -7]) 189))
(println (= (highest-product-of-three [8, 5, -9, -9]) 648))
(println (= (highest-product-of-three [3, -9, -10, 4, -7, -5, 9, -5, 6]) 810))
(println (= (highest-product-of-three [1, -1, 6, -4, 4, -10]) 240))
(println (= (highest-product-of-three [-6, 9, 3, -5, 0, 0, 3]) 270))
(println (= (highest-product-of-three [-7, 1, -2, -8, 3, -2, 1, 5, -2]) 280))
(println (= (highest-product-of-three [9, 4, -9]) -324))
(println (= (highest-product-of-three [9, 3, -3, 0, -5, -2, -1, 2]) 135))
(println (= (highest-product-of-three [1, 3, 3, -10, 7]) 63))
(println (= (highest-product-of-three [8, 1, -6]) -48))
(println (= (highest-product-of-three [-3, 7, 3, -1]) 21))
(println (= (highest-product-of-three [1, -1, 9, 8, 1]) 72))
(println (= (highest-product-of-three [-3, 5, 3, 6, 2, -5]) 90))
(println (= (highest-product-of-three [-10, -4, -1, 6, 2]) 240))
(println (= (highest-product-of-three [2, 3, 5, -1, -4, 1, -1, 5]) 75))
(println (= (highest-product-of-three [4, -7, 6, 2, -1, 9, 8]) 432))
(println (= (highest-product-of-three [-6, 4, 1, 8, 1, 9]) 288))
(println (= (highest-product-of-three [9, -3, -5, -6, 7, 8]) 504))
(println (= (highest-product-of-three [-8, -7, 6]) 336))
(println (= (highest-product-of-three [-5, -10, -9, 9, -10]) 900))
(println (= (highest-product-of-three [0, 3, -8, -9, 8, -4, -7]) 576))
(println (= (highest-product-of-three [3, 5, -6, -2]) 60))
(println (= (highest-product-of-three [3, -1, -1, -5, 0, -5, -2]) 75))
(println (= (highest-product-of-three [-9, -3, -5, 6]) 270))
(println (= (highest-product-of-three [5, 6, 5, -8, 3, -9, 7]) 504))
(println (= (highest-product-of-three [6, -2, -6, -10]) 360))
(println (= (highest-product-of-three [0, -7, 3, 8]) 0))
(println (= (highest-product-of-three [2, -2, 5, -10, -7, -3, -10, 5]) 500))
(println (= (highest-product-of-three [1, 7, -4, 9, -10, -8, -3, 0]) 720))
(println (= (highest-product-of-three [4, 2, -7]) -56))
(println (= (highest-product-of-three [-3, -2, -3, -2, 8, -6, -1, -9, 9]) 486))
(println (= (highest-product-of-three [-7, 7, 3, 2, 8, -5, 6]) 336))
(println (= (highest-product-of-three [-5, 7, -3, -8, -8, -5, -6, -10]) 560))
(println (= (highest-product-of-three [1, -4, 4, 8, 0, -7, 2, -9, 8]) 504))
(println (= (highest-product-of-three [-6, -4, -8, 9, 2, -9, -7, -3]) 648))
(println (= (highest-product-of-three [3, 1, 9]) 27))
(println (= (highest-product-of-three [3, 4, -1]) -12))
(println (= (highest-product-of-three [7, -9, -5]) 315))
(println (= (highest-product-of-three [-7, 5, -8, -1, 6, -7]) 336))
(println (= (highest-product-of-three [-6, 7, -6, 3, 4, 7, -1]) 252))
(println (= (highest-product-of-three [-9, -5, -10, -1, 5, -2, 5, 6]) 540))
(println (= (highest-product-of-three [-6, -9, 9, 2, 5, 3, -5, -6, -2]) 486))
(println (= (highest-product-of-three [-3, -7, 5]) 105))
(println (= (highest-product-of-three [-3, 1, -6, 7, 7, -3, 8]) 392))
(println (= (highest-product-of-three [4, -1, -9, 2, 3]) 36))
(println (= (highest-product-of-three [9, 7, -5, -1, 1, 8, 5, -8, -9]) 648))
(println (= (highest-product-of-three [-8, 1, 0, 2]) 0))
(println (= (highest-product-of-three [9, -5, -9, -10, -10, 5, -7, 2, -1]) 900))
(println (= (highest-product-of-three [-7, 9, -7, 0, -3, 9, 4, 1, -10]) 630))
(println (= (highest-product-of-three [-3, -4, -10, -3, 0, -1, 5, -2]) 200))
(println (= (highest-product-of-three [-10, 0, 8, 5, -10, -3, -3, 3, -4]) 800))
(println (= (highest-product-of-three [-7, 2, -5, -2]) 70))
(println (= (highest-product-of-three [-5, -2, -9, 7, 7, -8]) 504))
(println (= (highest-product-of-three [-6, 6, 0, 1, 6, 0, -1]) 36))
(println (= (highest-product-of-three [2, -9, -10, 2, -3]) 180))
(println (= (highest-product-of-three [-6, 6, 1]) -36))
(println (= (highest-product-of-three [-8, -7, 3, 7, -8, 5]) 448))
(println (= (highest-product-of-three [7, 7, -4, -2]) 56))
(println (= (highest-product-of-three [-7, 3, -8, -3]) 168))
(println (= (highest-product-of-three [-2, 0, 3, -10, 3, -5, -6]) 180))
(println (= (highest-product-of-three [1, 2, -1, 6, -8, -10, -7, 7]) 560))
(println (= (highest-product-of-three [-10, 7, 6]) -420))
(println (= (highest-product-of-three [3, 9, 3, 7, -1]) 189))
(println (= (highest-product-of-three [2, -8, -9, -9, -8, 8]) 648))
(println (= (highest-product-of-three [7, -6, -6, 1, -4, 5, -6, 7]) 252))
(println (= (highest-product-of-three [7, -2, 0, -8]) 112))
(println (= (highest-product-of-three [-9, -3, -4, 1, -9, 0, 6, 0, 8]) 648))
(println (= (highest-product-of-three [9, 1, 1]) 9))
(println (= (highest-product-of-three [-9, 7, -8, -8, 8, -8]) 576))
(println (= (highest-product-of-three [8, -8, 8, 4, 9, 1, -9, 4, -6]) 648))
(println (= (highest-product-of-three [6, 0, -7, -6, -8, 0]) 336))
(println (= (highest-product-of-three [-1, -1, 2, 4]) 4))
(println (= (highest-product-of-three [0, 2, -3, -3, -10, 4, -7, -10, -7]) 400))
(println (= (highest-product-of-three [0, 0, -5, 8, 4, 7, 6]) 336))
(println (= (highest-product-of-three [2, 5, -7, 8]) 80))
(println (= (highest-product-of-three [-10, 1, 8, -3, -5, 8, -6, 5, 6]) 480))
(println (= (highest-product-of-three [8, 8, -3]) -192))
(println (= (highest-product-of-three [4, -10, 4, -6]) 240))
(println (= (highest-product-of-three [-3, -4, -4, -9, -3, 5, 5, -6, 5]) 270))
(println (= (highest-product-of-three [5, 1, -10, -6, -1, 6]) 360))
(println (= (highest-product-of-three [4, -9, 6]) -216))
(println (= (highest-product-of-three [3, -1, -2, 0, -5, -5, -1, -5]) 75))
(println (= (highest-product-of-three [3, 4, 4, -4, -6, -9, 1, -4, -3]) 216))
(println (= (highest-product-of-three [0, -3, 3, 7, 4, 1, 3]) 84))
(println (= (highest-product-of-three [1, -7, 9, -1, 5, -4, -8, -4]) 504))
(println (= (highest-product-of-three [8, -4, 7, -2, -1, 6]) 336))
(println (= (highest-product-of-three [-1, -3, -5, 3, -6, -9, 5, 9]) 486))
(println (= (highest-product-of-three [4, -8, -3, 3, 2, -10, -9, 2, -7]) 360))
(println (= (highest-product-of-three [0, -8, 7, -7, -7, 6, -3, 8, -9]) 576))
(println (= (highest-product-of-three [-2, -9, -10, 6, -4, 8, -7, -1]) 720))
(println (= (highest-product-of-three [4, -9, -5, -6, -1]) 216))
(println (= (highest-product-of-three [-4, -1, 2]) 8))
(println (= (highest-product-of-three [-10, -5, -4, 5, 7, -10, -6, 7]) 700))
(println (= (highest-product-of-three [-7, -10, 0, 5, -9, -8]) 450))
(println (= (highest-product-of-three [4, 9, 8, -1]) 288))
(println (= (highest-product-of-three [-9, 8, -7, 9, 9]) 648))
(println (= (highest-product-of-three [-4, -2, 3, 6, 4, -7, -1]) 168))
(println (= (highest-product-of-three [2, -9, 8]) -144))
(println (= (highest-product-of-three [0, 6, -3, 9, -10, -8, 0, -3, -3]) 720))
(println (= (highest-product-of-three [7, 0, -4, 8, 8, -8, 7, -10, 6]) 640))
(println (= (highest-product-of-three [1, -3, 5, 6, -8, 4, -2, 5, -2]) 150))
(println (= (highest-product-of-three [-5, -7, 0, 0, 2]) 70))
(println (= (highest-product-of-three [9, 1, -10, 7, -1, -6, -3]) 540))
(println (= (highest-product-of-three [6, -8, 9, -6, -4, 3, 4]) 432))
(println (= (highest-product-of-three [-6, 3, 6, 9, -3, 5]) 270))
(println (= (highest-product-of-three [6, 3, -7, 9, 7, -8, 1]) 504))
(println (= (highest-product-of-three [-3, 7, -6, -9, -4, 0, 0]) 378))
(println (= (highest-product-of-three [1, -8, -4, -3, -5, -8, -2]) 64))
(println (= (highest-product-of-three [-2, -4, -1, -2]) -4))
(println (= (highest-product-of-three [-1, 1, -4]) 4))
(println (= (highest-product-of-three [6, 6, 1, 1, 1, -4]) 36))
(println (= (highest-product-of-three [-7, 0, 4, 5, -8, 1]) 280))
(println (= (highest-product-of-three [4, -10, 8, -6, -3, 8, -7]) 560))
(println (= (highest-product-of-three [5, -9, -7, -4, 1, 9]) 567))
(println (= (highest-product-of-three [8, -4, 4, 7]) 224))
(println (= (highest-product-of-three [-2, -8, -8, -10, 8, -7, 9, 2, -5]) 720))
(println (= (highest-product-of-three [-7, 1, -2, -10, 4, 0]) 280))
(println (= (highest-product-of-three [-10, 2, -2, -10, -9, -4, -5]) 200))
(println (= (highest-product-of-three [-8, -10, -1, -4, -1, 0, 6, 7, 7]) 560))
(println (= (highest-product-of-three [-2, 0, 5]) 0))
(println (= (highest-product-of-three [-5, 9, 1, 4, 9, 9, -2, -2, -5]) 729))
(println (= (highest-product-of-three [-2, -2, 4, -1, -5]) 40))
(println (= (highest-product-of-three [6, 3, -7, 3, -9, 3, -3, -7]) 378))
(println (= (highest-product-of-three [3, 7, -6, 0, 8, 2, 2, -2]) 168))
(println (= (highest-product-of-three [1, 1, -7, 9, 4, -8]) 504))
(println (= (highest-product-of-three [-2, 6, -9, -5]) 270))
(println (= (highest-product-of-three [0, -3, 9, 3, -2, -5]) 135))
(println (= (highest-product-of-three [-5, 7, -8, 1, -2, -4, -5, -1, 2]) 280))
(println (= (highest-product-of-three [6, -6, 6, -1, -8, -9]) 432))
(println (= (highest-product-of-three [5, -8, -8, 6, -7, 6, 1]) 384))
(println (= (highest-product-of-three [-3, 8, 0]) 0))
(println (= (highest-product-of-three [8, -10, -7, -3, 5, -6, -4, -2]) 560))
(println (= (highest-product-of-three [-4, -9, 4, 5, 4, -9]) 405))
(println (= (highest-product-of-three [8, 6, 1]) 48))
(println (= (highest-product-of-three [-4, 5, -3, 0, 4, 0, 6, -8, 5]) 192))
(println (= (highest-product-of-three [5, -6, -2]) 60))
(println (= (highest-product-of-three [4, -9, -3, 2, 5, 9, 1, 1]) 243))
(println (= (highest-product-of-three [1, 5, 4, -10, 4, -7, -5, -4]) 350))
(println (= (highest-product-of-three [-6, 8, -5]) 240))
(println (= (highest-product-of-three [-10, -6, -7, 9, 6, -10, 0, -3]) 900))
(println (= (highest-product-of-three [-3, -1, 6, -5, -9, -4]) 270))
(println (= (highest-product-of-three [-9, 5, -7]) 315))
(println (= (highest-product-of-three [3, -1, 1, 4, -6, -5, -6, -7, 9]) 378))
(println (= (highest-product-of-three [0, -8, -2, 3, -6]) 144))
(println (= (highest-product-of-three [4, 5, 9, 4, 3, 4, 9, 5]) 405))
(println (= (highest-product-of-three [2, 8, 2, -7, -2, -5]) 280))
(println (= (highest-product-of-three [-4, 6, -1, -2]) 48))
(println (= (highest-product-of-three [9, -9, 1, 0]) 0))
(println (= (highest-product-of-three [-8, -3, -5, 0, -10]) 0))
(println (= (highest-product-of-three [-2, -2, 8, -1, -5, -2]) 80))
(println (= (highest-product-of-three [-1, -1, 6]) 6))
(println (= (highest-product-of-three [-2, 6, 6, 0, -9, -8]) 432))
(println (= (highest-product-of-three [-7, -5, 1]) 35))
(println (= (highest-product-of-three [-1, -9, -4, -10, -4, -3, 7]) 630))
(println (= (highest-product-of-three [2, -5, 6, -7, -8]) 336))
(println (= (highest-product-of-three [1, 7, -6, 5, -2, -2, -7]) 294))
(println (= (highest-product-of-three [5, -10, 9, 9, -1, -2]) 405))
(println (= (highest-product-of-three [-4, -5, -7, -5, 4, 0]) 140))
(println (= (highest-product-of-three [6, 3, 3, -1, 3, -3, 3, -9]) 162))
(println (= (highest-product-of-three [9, -6, -7, 1, -2, 8, 0, 1, -1]) 378))
(println (= (highest-product-of-three [1, -3, -7]) 21))
(println (= (highest-product-of-three [3, -8, 2, -9, -7]) 216))
(println (= (highest-product-of-three [4, 3, 1, -3, -7]) 84))
(println (= (highest-product-of-three [-10, 9, 5]) -450))
(println (= (highest-product-of-three [4, -9, -7, 0, -1, -3, -2]) 252))
(println (= (highest-product-of-three [-10, -8, -4, 9, -3, -3, 9]) 720))
(println (= (highest-product-of-three [2, -5, 0]) 0))
(println (= (highest-product-of-three [-4, -9, -9, 2, 8, 8, -2]) 648))
(println (= (highest-product-of-three [-5, 7, 1, -2, -4, -7, -10, -5]) 490))
(println (= (highest-product-of-three [-5, 4, 3, 0, 7, 0]) 84))
(println (= (highest-product-of-three [2, -10, 7, 1, -1, -2, 2, 7, 1]) 140))
(println (= (highest-product-of-three [9, -4, -1, -7]) 252))
(println (= (highest-product-of-three [-9, 9, 9, 0, 6, -3, 7, 2, -6]) 567))
(println (= (highest-product-of-three [-10, 4, -9, -6, 0]) 360))
(println (= (highest-product-of-three [2, -1, 5, 2, -9]) 45))
(println (= (highest-product-of-three [-2, -7, 6, 1, 0]) 84))
(println (= (highest-product-of-three [4, 9, -9, -7, -9, -9, 3, -5, -8]) 729))
(println (= (highest-product-of-three [-7, 7, -5, -9]) 441))
(println (= (highest-product-of-three [-5, -5, 8]) 200))
(println (= (highest-product-of-three [3, 7, 9, -5, 8, -1]) 504))
(println (= (highest-product-of-three [-10, -6, -6, -3, 5, -1, -9, 5, -1]) 450))
(println (= (highest-product-of-three [-9, 1, -9, -5, 3, -4, 5]) 405))
(println (= (highest-product-of-three [-6, -5, -10, -1, 5]) 300))
(println (= (highest-product-of-three [-4, 4, 2, -8, 1, -2]) 128))
(println (= (highest-product-of-three [1, 8, -1, -1]) 8))
(println (= (highest-product-of-three [-10, -5, 6, -3, -2, 1, 6, -4, -4]) 300))
(println (= (highest-product-of-three [-6, 0, -3, -9, -4]) 0))
(println (= (highest-product-of-three [-9, -8, -7, -7, 8, 5, 0]) 576))
(println (= (highest-product-of-three [2, -1, 3, 0, -5, -4, 7]) 140))
(println (= (highest-product-of-three [-7, 1, -4, 7, -8, -9, 4, -6, 3]) 504))
(println (= (highest-product-of-three [9, -8, -7, 3]) 504))
(println (= (highest-product-of-three [3, -1, 6, 2, 9, -1, 4, -1, -8]) 216))
(println (= (highest-product-of-three [-2, -6, 4, 3, -3, -4, -2, 1, -7]) 168))
(println (= (highest-product-of-three [-2, -3, -6, 4]) 72))
(println (= (highest-product-of-three [-10, -8, 2, -1, 5, 3, 6]) 480))
(println (= (highest-product-of-three [-7, -2, -10, 3, 2, -3, -8, 9]) 720))
(println (= (highest-product-of-three [8, -9, 1, 0, 2, 9]) 144))
(println (= (highest-product-of-three [-4, -5, -4]) -80))
(println (= (highest-product-of-three [-3, 6, 5, -7, 8, -2, 0, 9, -5]) 432))
(println (= (highest-product-of-three [0, -7, -10, -3, -4, -5, -5, 6, 7]) 490))
(println (= (highest-product-of-three [7, -9, -2, 9, 7, 9, 7, -1]) 567))
(println (= (highest-product-of-three [-8, -10, 2, -3, -6, 9]) 720))
(println (= (highest-product-of-three [-8, 0, -1, 4, 1, 3, 1, 2, 4]) 48))
(println (= (highest-product-of-three [0, 4, -3, 4, -1, 9, -5, -7, -10]) 630))
(println (= (highest-product-of-three [-3, -7, 7, 9, 7]) 441))
(println (= (highest-product-of-three [5, 2, -1, -1, 9, -9, 9, 7]) 567))
(println (= (highest-product-of-three [1, -9, -9, -1, -2, -3, -7, 3]) 243))
(println (= (highest-product-of-three [1, 8, -6, -5, 3, -7]) 336))
(println (= (highest-product-of-three [7, -4, -5, -1]) 140))
(println (= (highest-product-of-three [1, -6, -1, -4, -5, 7, 7, -7]) 294))
(println (= (highest-product-of-three [-10, 7, 5, -3, 7, -3, -1, -7]) 490))
(println (= (highest-product-of-three [-7, -7, -4, 7, -7, -7, -3]) 343))
(println (= (highest-product-of-three [-9, 8, -2]) 144))
(println (= (highest-product-of-three [5, -5, -6, 3, 9, 1, -7, 2, 4]) 378))
(println (= (highest-product-of-three [7, 2, 1]) 14))
(println (= (highest-product-of-three [-7, 5, -3, -10, -5, -7]) 350))
(println (= (highest-product-of-three [6, 1, 8, 1, -8, 0]) 48))
(println (= (highest-product-of-three [4, -9, 8, 6]) 192))
(println (= (highest-product-of-three [3, 6, 0, 7, 6, -10]) 252))
(println (= (highest-product-of-three [-5, -7, 3, -10, 4, -8]) 320))
(println (= (highest-product-of-three [-8, 7, -2, 0, -7, -9, 1]) 504))
(println (= (highest-product-of-three [-6, 7, 7, 9, -4, -2, -2, 1, -10]) 540))
(println (= (highest-product-of-three [-2, 0, -1, -10, 2, 3, 3, 8]) 160))
(println (= (highest-product-of-three [-9, -10, -9, -9, 3, 8, 8, 6, 3]) 720))
(println (= (highest-product-of-three [-9, 9, 3, 6, 7, 8, -4]) 504))
(println (= (highest-product-of-three [6, -6, -3]) 108))
(println (= (highest-product-of-three [-10, 4, 0]) 0))
(println (= (highest-product-of-three [0, 4, -3, 8, 5, -3, 4, -8, -10]) 640))
(println (= (highest-product-of-three [2, -10, 2]) -40))
(println (= (highest-product-of-three [0, -10, 6, 2, 2, 0, -3]) 180))
(println (= (highest-product-of-three [0, -2, 0, -9, 5, -6, 9, -6, 4]) 486))
(println (= (highest-product-of-three [3, 8, -1, 0, -4, 6, 2, -3]) 144))
(println (= (highest-product-of-three [-6, -1, 9, -9, 6, -7, -7, -5, -5]) 567))
(println (= (highest-product-of-three [-4, 0, -2, 4, -6, 8, -4]) 192))
(println (= (highest-product-of-three [-3, 2, -10, -4, -5, 0, 6, -1, -2]) 300))
(println (= (highest-product-of-three [8, -8, 7, 4, 0, 7, 7, -7]) 448))
(println (= (highest-product-of-three [-3, 9, -7, 7, 4, 3]) 252))
(println (= (highest-product-of-three [-6, 2, 3, -10, -8, 5, 3, 0, 9]) 720))
(println (= (highest-product-of-three [-3, -6, -4, 8]) 192))
(println (= (highest-product-of-three [3, 1, 5, 0]) 15))
(println (= (highest-product-of-three [1, -1, -5]) 5))
(println (= (highest-product-of-three [-1, 1, 0, -7]) 7))
(println (= (highest-product-of-three [-8, 7, 5, -2, -8, 4, -9, 8]) 576))
(println (= (highest-product-of-three [1, 5, 2, 5]) 50))
(println (= (highest-product-of-three [-8, -2, 4, -9, -6, -5, 9, 6]) 648))
(println (= (highest-product-of-three [-4, 7, 2, 0, -1]) 28))
(println (= (highest-product-of-three [4, -4, 8, 4, 0, -3, -5, 1, -8]) 320))
(println (= (highest-product-of-three [2, -9, -1, -3]) 54))
(println (= (highest-product-of-three [-9, -3, -9, 8]) 648))
(println (= (highest-product-of-three [-5, 6, -5, -3, -2, -1, 9]) 225))
(println (= (highest-product-of-three [4, 9, 6, -5, -4, 1, -10, -6, -6]) 540))
(println (= (highest-product-of-three [8, 7, 2]) 112))
(println (= (highest-product-of-three [1, -10, -7]) 70))
(println (= (highest-product-of-three [9, 2, -2, 4, 1, 3]) 108))
(println (= (highest-product-of-three [-6, -2, 0, -8, 1]) 48))
(println (= (highest-product-of-three [-8, 2, 2, 3, 7, -6, -8, 9, -9]) 648))
(println (= (highest-product-of-three [3, -7, -9, 0, -4]) 189))
(println (= (highest-product-of-three [-4, 6, 2, 5, -2, -3, 6, -4, -4]) 180))
(println (= (highest-product-of-three [-7, -3, 8, 2, -5, 7, 8, -9]) 504))
(println (= (highest-product-of-three [-10, -1, 6, 4]) 60))
(println (= (highest-product-of-three [-6, 2, 5, -3]) 90))
(println (= (highest-product-of-three [1, 7, -8, -10, 7, 5, 1]) 560))
(println (= (highest-product-of-three [8, -7, 4, 8, -9, 6, -1, -5]) 504))
(println (= (highest-product-of-three [-3, -3, 8, -2, 6, -2, -8, -2]) 192))
(println (= (highest-product-of-three [1, -8, 1]) -8))
(println (= (highest-product-of-three [2, -4, 0, 2, 9, 8, -1]) 144))
(println (= (highest-product-of-three [1, 4, 8]) 32))
(println (= (highest-product-of-three [-4, -6, -3, 5, -10, -6, 1, -4, 8]) 480))
(println (= (highest-product-of-three [0, 2, 3, -10, 7, 6, 9, -7]) 630))
(println (= (highest-product-of-three [-10, 6, -6, 2, 2, -1, 1, -5]) 360))
(println (= (highest-product-of-three [4, -2, 0]) 0))
(println (= (highest-product-of-three [7, -6, 9, -7, 1, -1, -4, -2]) 378))
(println (= (highest-product-of-three [3, 2, 6, 7, -1, -4, -6, -8]) 336))
(println (= (highest-product-of-three [8, -7, -10, -7, 4, -4, -4]) 560))
(println (= (highest-product-of-three [2, 3, 5, 6]) 90))
(println (= (highest-product-of-three [-2, -5, -9]) -90))
(println (= (highest-product-of-three [0, 1, -8, -2, 8, -3, -9, 2]) 576))
(println (= (highest-product-of-three [9, -10, 3, 6, -3, -3, -1, 5, 8]) 432))
(println (= (highest-product-of-three [-7, 1, 1, -9, -1, -10, -1]) 90))
(println (= (highest-product-of-three [-6, 9, 6]) -324))
(println (= (highest-product-of-three [-5, -4, -6, -1, 1, 6, -4]) 180))
(println (= (highest-product-of-three [-5, 4, -3, -1, -2, 4, -4]) 80))
(println (= (highest-product-of-three [7, -10, 9, 9, -9, 3]) 810))
(println (= (highest-product-of-three [-7, -3, -5, 7, 9, 1]) 315))
(println (= (highest-product-of-three [-2, 2, 7]) -28))
(println (= (highest-product-of-three [-5, 8, 8, 2]) 128))
(println (= (highest-product-of-three [-4, -6, -5, -5, -1, 8, -9]) 432))
(println (= (highest-product-of-three [9, 1, 4, 9]) 324))
(println (= (highest-product-of-three [4, -7, 7, -9, 6]) 441))
(println (= (highest-product-of-three [5, 9, -6, -2, 0, -2, 5, -6, 2]) 324))
(println (= (highest-product-of-three [-3, 8, 3, -4, -4, 4, 5, -3]) 160))
(println (= (highest-product-of-three [-1, 9, 3, -2]) 18))
(println (= (highest-product-of-three [7, -10, -9, 2, -9, 9]) 810))
(println (= (highest-product-of-three [-6, 4, 6, -7, 2, -6, 4, 3]) 252))
(println (= (highest-product-of-three [-4, -3, 2]) 24))
(println (= (highest-product-of-three [-7, -10, -8, 5, 6]) 480))
(println (= (highest-product-of-three [-9, -2, -4, -7]) -56))
(println (= (highest-product-of-three [-4, 4, -9, -10, -3, -8, 9, -10]) 900))
(println (= (highest-product-of-three [7, -10, -8, 0, -4, -4, 7]) 560))
(println (= (highest-product-of-three [4, 3, 9, -6]) 108))
(println (= (highest-product-of-three [-8, 6, 1, 0, 5, -1, 8]) 240))
(println (= (highest-product-of-three [-9, -2, 0, 4]) 72))
(println (= (highest-product-of-three [1, 6, -4, -7, -5, 4, 0, 9]) 315))
(println (= (highest-product-of-three [7, -10, -9, 3]) 630))
(println (= (highest-product-of-three [-7, -6, 4, 7, -8, -8, 7, -7, -9]) 504))
(println (= (highest-product-of-three [4, 2, -2, -9, -9]) 324))
(println (= (highest-product-of-three [-6, -9, 5]) 270))
(println (= (highest-product-of-three [2, -6, -7]) 84))
(println (= (highest-product-of-three [4, -8, -6, 6, 8, -8, 3, 4]) 512))
(println (= (highest-product-of-three [4, -10, -10, 5, 2, -4, -5, 3]) 500))
(println (= (highest-product-of-three [3, 5, -7]) -105))
(println (= (highest-product-of-three [4, -7, 0, 3]) 0))
(println (= (highest-product-of-three [5, -6, -5, -6, -8, -5]) 240))
(println (= (highest-product-of-three [-1, 6, -5, 9, -8, 2, 6, -10]) 720))
(println (= (highest-product-of-three [6, 3, 4, -7, 2, -2, 2]) 84))
(println (= (highest-product-of-three [7, -5, 7, 1, -2, -3, 1, 7, -4]) 343))
(println (= (highest-product-of-three [-8, -7, 0, -5, 3, -7, 3, -6]) 168))
(println (= (highest-product-of-three [2, 1, 3, 4, -4]) 24))
(println (= (highest-product-of-three [6, -6, 1]) -36))
(println (= (highest-product-of-three [7, -4, -10, -4, 4, 5]) 280))
(println (= (highest-product-of-three [-2, 7, 1, -6, -5, 2]) 210))
(println (= (highest-product-of-three [9, -2, -10, -7, 8]) 630))
(println (= (highest-product-of-three [3, -3, 4, 3]) 36))
(println (= (highest-product-of-three [-7, -2, 4]) 56))
(println (= (highest-product-of-three [1, -6, 5]) -30))
(println (= (highest-product-of-three [6, -5, -9, 5, -3]) 270))
(println (= (highest-product-of-three [-10, 3, 6, 8, 7, 6, 8]) 448))
(println (= (highest-product-of-three [6, 2, -9, 2, 6, 2]) 72))
(println (= (highest-product-of-three [-7, -4, -2, 3, -4, -10]) 210))
(println (= (highest-product-of-three [0, 2, 1, -10]) 0))
(println (= (highest-product-of-three [5, 5, 4, -9, -7, -1]) 315))
(println (= (highest-product-of-three [-6, -1, -1, -8, 0, 4, -7]) 224))
(println (= (highest-product-of-three [-5, 7, -3, -2, 4, 1]) 105))
(println (= (highest-product-of-three [2, 6, 2, -7, -8, 0]) 336))
(println (= (highest-product-of-three [2, 6, -1, 2]) 24))
(println (= (highest-product-of-three [1, 8, -4, -2]) 64))
(println (= (highest-product-of-three [4, 3, 8, -9, 0, -1]) 96))
(println (= (highest-product-of-three [-8, -9, -5, -4, -5, 9, 3]) 648))
(println (= (highest-product-of-three [4, -10, 5, 5, -6, -4, 9, 7]) 540))
(println (= (highest-product-of-three [-3, 6, -7, -1, -10, 8]) 560))
(println (= (highest-product-of-three [-1, -6, 6, 9, 5]) 270))
(println (= (highest-product-of-three [5, -7, 5, -2, -1, 9, 1, -5]) 315))
(println (= (highest-product-of-three [-3, -3, 1, -9, 2, 1, -6]) 108))
(println (= (highest-product-of-three [-1, 1, -5, 3]) 15))
(println (= (highest-product-of-three [-8, -8, 6, 4, 2]) 384))
(println (= (highest-product-of-three [-5, -4, -6, -8, 8, -3, -9, 2]) 576))
(println (= (highest-product-of-three [3, -5, 8]) -120))
(println (= (highest-product-of-three [9, -1, -7, 8, -6]) 378))
(println (= (highest-product-of-three [-7, -3, -3, -4, -6, 2, -2]) 84))
(println (= (highest-product-of-three [-2, 8, -7, 5, 3, 6, -9]) 504))
(println (= (highest-product-of-three [-7, 8, 4, -4, -2, 3]) 224))
(println (= (highest-product-of-three [1, -5, 6, 8, 5, 3, -8]) 320))
(println (= (highest-product-of-three [-7, 5, 5, -1, 3, 2, 6, 2]) 150))
(println (= (highest-product-of-three [7, 5, 2, -6, 6, 0, 7, -6, 5]) 294))
(println (= (highest-product-of-three [-10, 5, -6, -2, 0]) 300))
(println (= (highest-product-of-three [-9, -7, 3, -10, 0, 4, -5, 2]) 360))
(println (= (highest-product-of-three [-5, 9, 8, 7, -6, 0, 9]) 648))
(println (= (highest-product-of-three [-10, 9, -2, -1, 7, -5, 4]) 450))
(println (= (highest-product-of-three [-8, 2, -6, 7, 6, 8, 6, -7, -4]) 448))
(println (= (highest-product-of-three [2, -5, 4, -6, -2, -4]) 120))
(println (= (highest-product-of-three [-1, -1, 2]) 2))
(println (= (highest-product-of-three [-8, -4, -1, -3, 0]) 0))
(println (= (highest-product-of-three [0, 6, -1, -1, 2, -4, 9]) 108))
(println (= (highest-product-of-three [-8, -4, -5]) -160))
(println (= (highest-product-of-three [-7, 8, 5]) -280))
(println (= (highest-product-of-three [7, 3, -7, 2, -10, -5, -9, 2, 8]) 720))
(println (= (highest-product-of-three [-7, 5, -10, -4]) 350))
(println (= (highest-product-of-three [8, -3, -9]) 216))
(println (= (highest-product-of-three [3, 1, 5, -2, -10, 8, 1, 9]) 360))
(println (= (highest-product-of-three [-3, -6, -2, 7, 9, 2, 3, 1]) 189))
(println (= (highest-product-of-three [-3, -9, 2, -5]) 90))
(println (= (highest-product-of-three [-4, -6, -5, 7, -10, 7]) 420))
(println (= (highest-product-of-three [5, 8, -6, -5, 1, 2]) 240))
(println (= (highest-product-of-three [8, 1, 4, -5, 4]) 128))
(println (= (highest-product-of-three [0, 9, -1, -10, 3, -10, -5, 2, -7]) 900))
(println (= (highest-product-of-three [-2, -7, 6, 9, 1]) 126))
(println (= (highest-product-of-three [-6, 1, -6, 6, -2, 2, -4]) 216))
(println (= (highest-product-of-three [-8, -10, 9]) 720))
(println (= (highest-product-of-three [-4, -6, 4, -3, -4, 8, 7, -4, 9]) 504))
(println (= (highest-product-of-three [9, -4, 4, -7, 3, 1, -9, 5]) 567))
(println (= (highest-product-of-three [4, 5, -7, -6, 3, 4, 3, -9, -10]) 450))
(println (= (highest-product-of-three [-8, -3, 0, -10, 7]) 560))
(println (= (highest-product-of-three [-4, -2, 5, 9, -3, -4, 3, 8]) 360))
(println (= (highest-product-of-three [-3, -10, -10, -2, -9, -6]) -36))
(println (= (highest-product-of-three [-3, -3, 3, 3]) 27))
(println (= (highest-product-of-three [-4, -2, 9, -4]) 144))
(println (= (highest-product-of-three [-10, -7, 0, 2, 3, -8, -5, -2]) 240))
(println (= (highest-product-of-three [-5, -6, -1, 9, 5]) 270))
(println (= (highest-product-of-three [3, -5, -10, 7, 0, -10]) 700))
(println (= (highest-product-of-three [-3, 8, -6]) 144))
(println (= (highest-product-of-three [3, -2, 5, -7, 2, -2, 3, -5]) 175))
(println (= (highest-product-of-three [4, -3, -8, 8]) 192))
(println (= (highest-product-of-three [-10, -3, -8, 0, -2, 1, -9, -6, 8]) 720))
(println (= (highest-product-of-three [0, 8, 1, -10]) 0))
(println (= (highest-product-of-three [8, 3, -4, -1, 0]) 32))
(println (= (highest-product-of-three [6, 1, 7, 0, -5, 7, 5, -2]) 294))
(println (= (highest-product-of-three [-10, 9, -10, 2, 9, -1, -8, -4]) 900))
(println (= (highest-product-of-three [-2, 3, -3, 8, 5]) 120))
(println (= (highest-product-of-three [4, -2, 8, 9, 0, 2, -3, 7]) 504))
(println (= (highest-product-of-three [5, 0, 8, -1, 9, 9, 4, -4]) 648))
(println (= (highest-product-of-three [1, -9, 5, 8]) 40))
(println (= (highest-product-of-three [0, -6, 5, 7]) 0))
(println (= (highest-product-of-three [-4, -1, -2, -5, 6, 6]) 120))
(println (= (highest-product-of-three [-2, -2, -3, -4, 5, -3, 3, 6, -8]) 192))
(println (= (highest-product-of-three [4, 8, -9]) -288))
(println (= (highest-product-of-three [9, 4, -8, -8, -9, 7, -7]) 648))
(println (= (highest-product-of-three [9, -4, -9, -8, -5]) 648))
(println (= (highest-product-of-three [9, -1, -10, -1]) 90))
(println (= (highest-product-of-three [-3, 2, -5, -9, -9, 8]) 648))
(println (= (highest-product-of-three [-3, -2, -9, 7, -3, -7, 9, 0, 1]) 567))
(println (= (highest-product-of-three [6, -9, 6, 8, 7]) 336))
(println (= (highest-product-of-three [-2, -7, -4, 4, 1, 7]) 196))
(println (= (highest-product-of-three [-2, 8, -4, 1]) 64))
(println (= (highest-product-of-three [-8, 3, 6, -2, -4]) 192))
(println (= (highest-product-of-three [9, -9, -6, 4, 3, -10]) 810))
(println (= (highest-product-of-three [-3, 7, 2, -7, 2, 3, -3, -3]) 147))
(println (= (highest-product-of-three [-2, -4, 5, 7]) 56))
(println (= (highest-product-of-three [2, 3, -10, 1, -9, -2, -7]) 270))
(println (= (highest-product-of-three [-2, -8, 9, -7, -1, -6, 5, -6]) 504))
(println (= (highest-product-of-three [9, -6, 3]) -162))
(println (= (highest-product-of-three [-8, 0, 4, -3, 2, 5, 5]) 120))
(println (= (highest-product-of-three [2, -6, 6]) -72))
(println (= (highest-product-of-three [0, 6, -4]) 0))
(println (= (highest-product-of-three [7, 0, -9, 0, 0, 0, -8, 8, -8]) 576))
(println (= (highest-product-of-three [2, -2, 8]) -32))
(println (= (highest-product-of-three [2, -6, 4, 8, -8, 3]) 384))
(println (= (highest-product-of-three [-7, -1, -10, -6, -8, 9, -9]) 810))
(println (= (highest-product-of-three [-3, 7, 8, 6, 6, 4, 1, 2]) 336))
(println (= (highest-product-of-three [-10, 0, 1, 7, -9, -1, -3]) 630))
(println (= (highest-product-of-three [6, -4, 4, 2, 0, 7, 8, -9, 4]) 336))
(println (= (highest-product-of-three [-4, 1, 7, -2, -10, 5, 1, 1, 7]) 280))
(println (= (highest-product-of-three [0, 5, 8, 8]) 320))
(println (= (highest-product-of-three [4, -3, 2, 2, 7]) 56))
(println (= (highest-product-of-three [-2, -7, 8]) 112))
(println (= (highest-product-of-three [-8, 6, -6]) 288))
(println (= (highest-product-of-three [0, 0, 0, -3, 9, 8, 0, 0]) 0))
(println (= (highest-product-of-three [7, 0, -3, 8, -4, 7, 0, 3]) 392))
(println (= (highest-product-of-three [2, -3, -6, -7]) 84))
(println (= (highest-product-of-three [8, -6, -9, -9, -2, 6, -8, -6, 7]) 648))
(println (= (highest-product-of-three [9, -1, -7, 1]) 63))
(println (= (highest-product-of-three [-6, -10, 9, 2, -8]) 720))
(println (= (highest-product-of-three [1, 2, 6, 6, 0, -7, 4, 4]) 144))
(println (= (highest-product-of-three [8, 1, -2, -8, 5, 8]) 320))
(println (= (highest-product-of-three [3, 3, 6, 1, -7, -2, 0, 7, 6]) 252))
(println (= (highest-product-of-three [0, 0, -9, -2, -1, 0, 8]) 144))
(println (= (highest-product-of-three [5, 4, 0, 8, -2, -8, -8]) 512))
(println (= (highest-product-of-three [2, 1, -8]) -16))
(println (= (highest-product-of-three [-10, -4, 8, 2]) 320))
(println (= (highest-product-of-three [-10, 3, -6, -4, 3, -4, 6, -4, 6]) 360))
(println (= (highest-product-of-three [1, -3, 8, 4]) 32))
(println (= (highest-product-of-three [2, -1, -2, 0, 7, -10, -3]) 210))
(println (= (highest-product-of-three [1, 8, 5, -8, -7, -8, -8]) 512))
(println (= (highest-product-of-three [6, 5, 2, 3]) 90))
(println (= (highest-product-of-three [-4, -8, -9, 3, -3, 8, -7, -3, -1]) 576))
(println (= (highest-product-of-three [-8, -5, 1, -2, -7, 2, -3, -8]) 128))
(println (= (highest-product-of-three [-3, 0, -5, -8, 0, -9, 5, -1, 7]) 504))
(println (= (highest-product-of-three [6, -9, 6, 8, -8, -8]) 576))
(println (= (highest-product-of-three [7, 6, 9]) 378))
(println (= (highest-product-of-three [-7, -10, 6, 1, -4, 8]) 560))
(println (= (highest-product-of-three [-5, -2, -9, -6, -2, -9, 7, -2]) 567))
(println (= (highest-product-of-three [-6, 2, -10, -2, -3, 9, -3]) 540))
(println (= (highest-product-of-three [8, 9, -4, -5, 8, -7, 7, 6]) 576))
(println (= (highest-product-of-three [-7, 4, 3, -2, -7, 3, -4, -6]) 196))
(println (= (highest-product-of-three [-3, 0, 5, -9, -4]) 180))
(println (= (highest-product-of-three [-4, -2, -10, -10, 9, 5]) 900))
(println (= (highest-product-of-three [-4, 8, -4, -7, -8, 9, -2, 5]) 504))
(println (= (highest-product-of-three [0, -9, -10, 6, 7, 2, -2, 2]) 630))
(println (= (highest-product-of-three [-3, -10, -10, 7, 0, 9, 9, 4]) 900))
(println (= (highest-product-of-three [-6, 9, -4]) 216))
(println (= (highest-product-of-three [-3, 7, -3, 7, -6, -9, 6, -10]) 630))
(println (= (highest-product-of-three [-8, 3, -4, -4, -7]) 168))
(println (= (highest-product-of-three [-10, -4, 3, -2, -2, 0]) 120))
(println (= (highest-product-of-three [1, -5, -2, -8, 5]) 200))
(println (= (highest-product-of-three [1, 7, 6, -5, 1, 0]) 42))
(println (= (highest-product-of-three [-9, -8, 6, -5]) 432))
(println (= (highest-product-of-three [-3, -10, 5, 0, 3, -3]) 150))
(println (= (highest-product-of-three [0, 9, 5, -1]) 0))
(println (= (highest-product-of-three [5, 5, 0, -3, -10]) 150))
(println (= (highest-product-of-three [-4, -9, 1, 9, -6, 9, -10, -5]) 810))
(println (= (highest-product-of-three [-10, 0, -7, -7, 8, -7, 5]) 560))
(println (= (highest-product-of-three [4, 8, 0, 7]) 224))
(println (= (highest-product-of-three [9, 0, -8, 0, 0, -8, -10, 4, 9]) 720))
(println (= (highest-product-of-three [-5, 1, 9, -6, -2]) 270))
(println (= (highest-product-of-three [-6, -9, 2]) 108))
(println (= (highest-product-of-three [2, -10, -7, 6, -8, 0, -9]) 540))
(println (= (highest-product-of-three [8, -10, -7, -9, -8, -2, -9]) 720))
(println (= (highest-product-of-three [1, -3, 3, 0, 7, 6, 1]) 126))
(println (= (highest-product-of-three [4, -4, 5, 6]) 120))
(println (= (highest-product-of-three [7, -6, 9, 0, 7, -3]) 441))
(println (= (highest-product-of-three [-6, 3, -10]) 180))
(println (= (highest-product-of-three [4, -6, -4, -5, -6]) 144))
(println (= (highest-product-of-three [-6, -9, -6]) -324))
(println (= (highest-product-of-three [0, 7, 3, -2, -5, -9]) 315))
(println (= (highest-product-of-three [7, 8, 2, -4, -9, -8, -7, 4, 3]) 576))
(println (= (highest-product-of-three [8, 0, 3, 1, 2, 9, -3]) 216))
(println (= (highest-product-of-three [6, -9, 3, -2, 9, 5]) 270))
(println (= (highest-product-of-three [-5, 1, -4, 7]) 140))
(println (= (highest-product-of-three [-2, -7, -6, -10, -1]) -12))
(println (= (highest-product-of-three [3, -10, -8, -6, -2, -4, -9, 9, -1]) 810))
(println (= (highest-product-of-three [8, 8, -8, 9, -7, -10, -7, 7, -10]) 900))
(println (= (highest-product-of-three [1, -1, 1, -1, -8]) 8))
(println (= (highest-product-of-three [-8, -6, -6]) -288))
(println (= (highest-product-of-three [2, 8, -7, -4, -9, 9, 7, -7]) 567))
(println (= (highest-product-of-three [-2, 9, -3, -10, 9, -9, 6, 2]) 810))
(println (= (highest-product-of-three [0, -1, -4, 9, -5, -7]) 315))
(println (= (highest-product-of-three [3, 4, -3, 3, -3, 8, 7]) 224))
(println (= (highest-product-of-three [0, 5, -3, -2, -2, 5, 7, -2]) 175))
(println (= (highest-product-of-three [-1, 2, 3, -5, -3]) 45))
(println (= (highest-product-of-three [6, 5, -6, 6, -4]) 180))
(println (= (highest-product-of-three [6, 0, -8]) 0))
(println (= (highest-product-of-three [8, 3, 9, -3]) 216))
(println (= (highest-product-of-three [0, -2, -3, -2, -1, -9]) 0))
(println (= (highest-product-of-three [0, -3, 5, -6, -1, 9, 8]) 360))
(println (= (highest-product-of-three [-7, 6, -6, 8, -6, 5, 6, -3]) 336))
(println (= (highest-product-of-three [2, -10, 4, -3, 6, 4, -4, -5]) 300))
(println (= (highest-product-of-three [-1, -10, -3]) -30))
(println (= (highest-product-of-three [-6, 1, -3, -7]) 42))
(println (= (highest-product-of-three [3, 8, 8, -2, -6, 9, -10]) 576))
(println (= (highest-product-of-three [5, -5, 0, -7, 7, 5, 8, -6]) 336))
(println (= (highest-product-of-three [2, 0, -2, -1, -2, 0, 4]) 16))
(println (= (highest-product-of-three [5, -5, 5, -4, 0, -4, -4, 1, -10]) 250))
(println (= (highest-product-of-three [-1, -5, 2, -7, 7, 1]) 245))
(println (= (highest-product-of-three [-5, 2, 2, 8, 0, 1]) 32))
(println (= (highest-product-of-three [6, 8, 7, 7, 1, -8]) 392))
(println (= (highest-product-of-three [-1, 0, -5, -6]) 0))
(println (= (highest-product-of-three [-5, 9, -10, 6, 0, -4]) 450))
(println (= (highest-product-of-three [-6, 0, -4, -2, -8, -6]) 0))
(println (= (highest-product-of-three [5, -9, 7, -4]) 252))
(println (= (highest-product-of-three [-9, -3, -1, -5]) -15))
(println (= (highest-product-of-three [9, -6, 1, -6, 9, -4, -3]) 324))
(println (= (highest-product-of-three [5, 6, -1, 8, 3, 1, 7]) 336))
(println (= (highest-product-of-three [3, 7, 1, -4]) 21))
(println (= (highest-product-of-three [-8, -5, 5, -6, 9, 6, -1]) 432))
(println (= (highest-product-of-three [-5, 0, -2, 3, -1, 0, 9, -1]) 90))
(println (= (highest-product-of-three [1, -1, -1, -8, -9, 0]) 72))
(println (= (highest-product-of-three [-7, 7, 9, 5, 2, 8, 4, 5, 9]) 648))
(println (= (highest-product-of-three [6, -3, 2, 0]) 0))
(println (= (highest-product-of-three [-4, 6, 9, -10, 6, 4]) 360))
(println (= (highest-product-of-three [3, 3, -6, -9, -10]) 270))
(println (= (highest-product-of-three [-2, 6, -3, -8]) 144))
(println (= (highest-product-of-three [-6, 2, -6, -6, 4]) 144))
(println (= (highest-product-of-three [-4, 0, -6, 7, -6, -6, -2]) 252))
(println (= (highest-product-of-three [0, -8, -1, -6, 4, 3]) 192))
(println (= (highest-product-of-three [-7, -7, -3, -4, 5, 0]) 245))
(println (= (highest-product-of-three [-5, 2, 5, -6, -3]) 150))
(println (= (highest-product-of-three [3, -9, 7]) -189))
(println (= (highest-product-of-three [5, 8, 6, 6, 3]) 288))
(println (= (highest-product-of-three [-7, -6, 5, -9, 1, 0, -2]) 315))
(println (= (highest-product-of-three [4, 3, -10, 0, -1, -9, 0, -7]) 360))
(println (= (highest-product-of-three [-8, -3, 7, 0, -1, -2, -5]) 280))
(println (= (highest-product-of-three [-10, 5, -6, -2, -1, 6]) 360))
(println (= (highest-product-of-three [1, -2, -5, 9, 4, 0, 7, -5, -3]) 252))
(println (= (highest-product-of-three [7, 9, 6, 2, -1, 2]) 378))
(println (= (highest-product-of-three [7, -7, 5, -7, -5, -2, -1, -5, 0]) 343))
(println (= (highest-product-of-three [-9, 6, 4, 4, -5, 0, -4, -1, 8]) 360))
(println (= (highest-product-of-three [6, -5, -8, -8]) 384))
(println (= (highest-product-of-three [-7, 6, 2]) -84))
(println (= (highest-product-of-three [2, -10, 0, -1]) 20))
(println (= (highest-product-of-three [2, 0, -2, -7, 6, -7, -7]) 294))
(println (= (highest-product-of-three [5, -10, 3, 7, -1, -7, 8, -8, -4]) 640))
(println (= (highest-product-of-three [2, -8, -2, 4, -8]) 256))
(println (= (highest-product-of-three [-7, 7, 5, 0]) 0))
(println (= (highest-product-of-three [-2, 7, 0, -5, 4, 5, -5, 4]) 175))
(println (= (highest-product-of-three [-4, 6, 9, -3, -2, -1, 3, 5, 9]) 486))
(println (= (highest-product-of-three [-4, -9, 7, 6]) 252))
(println (= (highest-product-of-three [0, 4, -9]) 0))
(println (= (highest-product-of-three [-8, 5, 0, -6, -10, -9]) 450))
(println (= (highest-product-of-three [8, -7, 0, -7, -1]) 392))
(println (= (highest-product-of-three [5, 5, 7, -2, -1, 7]) 245))
(println (= (highest-product-of-three [6, 4, 0, 9, -9]) 216))
(println (= (highest-product-of-three [-7, 0, 6, -7, -6, -9, -10, 1]) 540))
(println (= (highest-product-of-three [3, -8, -4, -8, 3]) 192))
(println (= (highest-product-of-three [-6, -1, 4]) 24))
(println (= (highest-product-of-three [1, 6, 9, -8, -7, -3]) 504))
(println (= (highest-product-of-three [-7, -5, 0]) 0))
(println (= (highest-product-of-three [-6, -5, -10, 3]) 180))
(println (= (highest-product-of-three [-4, 9, -6, -7]) 378))
(println (= (highest-product-of-three [7, 9, 9, -6]) 567))
(println (= (highest-product-of-three [3, -6, 4, 1, 4, 1]) 48))
(println (= (highest-product-of-three [2, 8, -2]) -32))
(println (= (highest-product-of-three [-9, 3, -7, -3, -2, 4, 2]) 252))
(println (= (highest-product-of-three [8, -2, -10, 4, -6, -9, 8, 3]) 720))
(println (= (highest-product-of-three [0, 6, -9, 8, 1, 1, 4, -8, -2]) 576))
(println (= (highest-product-of-three [-3, 5, 0, 3, -3, 2, -8, -9]) 360))
(println (= (highest-product-of-three [-8, -3, -2, 3, 3]) 72))
(println (= (highest-product-of-three [-7, 6, -4, -9, -1, -7]) 378))
(println (= (highest-product-of-three [3, -9, -8, -7, 5, -1, 0, -5]) 360))
(println (= (highest-product-of-three [5, 9, -3, -6, 1, -3, -9, -8, 1]) 648))
(println (= (highest-product-of-three [-8, 9, 5, -3, 0, -1]) 216))
(println (= (highest-product-of-three [8, -6, -1]) 48))
(println (= (highest-product-of-three [5, -9, 3]) -135))
(println (= (highest-product-of-three [1, -4, 3, 3, 8, -8, -2, 0]) 256))
(println (= (highest-product-of-three [7, 9, 9]) 567))
(println (= (highest-product-of-three [3, -8, 8, 8, 6, 2, -3, 8]) 512))
(println (= (highest-product-of-three [8, -7, 2, 9, -6, 3, 2]) 378))
(println (= (highest-product-of-three [-4, 7, 5, 7, -10, -8, 8, 4, 5]) 640))
(println (= (highest-product-of-three [6, 3, -1, 0, 0]) 0))
(println (= (highest-product-of-three [-10, 3, -6, 8, -5, -2, 3, -3, 0]) 480))
(println (= (highest-product-of-three [9, -2, 1, -3]) 54))
(println (= (highest-product-of-three [-4, -3, -5, -1]) -12))
(println (= (highest-product-of-three [1, -3, -4]) 12))
(println (= (highest-product-of-three [9, 7, -10, -5, 8, -3, -4, 4, 1]) 504))
(println (= (highest-product-of-three [-1, -6, -7, -3, 3, -8, -7, 2, 9]) 504))
(println (= (highest-product-of-three [-10, 3, 7, -2, -8, 8, -6, 2, 6]) 640))
(println (= (highest-product-of-three [9, 2, -7, 3, 9, -10, 5, 3, 5]) 630))
(println (= (highest-product-of-three [-4, -8, 0, 6, 9, -5, -9, -4, 5]) 648))
(println (= (highest-product-of-three [-9, -7, 9, 4, 7, 9, 9, 7, 5]) 729))
(println (= (highest-product-of-three [-9, 1, 2, 7, 5, -3, -1, -4, 3]) 252))
(println (= (highest-product-of-three [1, -10, -10, 5, -10, 3, 7, 3]) 700))
(println (= (highest-product-of-three [6, 0, 2, 9, 4, -4, -8]) 288))
(println (= (highest-product-of-three [7, 3, 7, 6, 2]) 294))
(println (= (highest-product-of-three [-4, 9, 4]) -144))
(println (= (highest-product-of-three [2, -6, 2]) -24))
(println (= (highest-product-of-three [-10, 3, -4, -10]) 300))
(println (= (highest-product-of-three [5, 0, -9, -3, 4, -10, -3, -3, -6]) 450))
(println (= (highest-product-of-three [-5, 1, -9, 7, 5]) 315))
(println (= (highest-product-of-three [-9, -6, 3, -3, 7, -9, -1]) 567))
(println (= (highest-product-of-three [-9, 7, -5, -5]) 315))
(println (= (highest-product-of-three [-9, 3, -2, -4, 3, -3, -8, 8]) 576))
(println (= (highest-product-of-three [3, 3, 8]) 72))
(println (= (highest-product-of-three [-4, -6, -10, 7, -7]) 490))
(println (= (highest-product-of-three [2, -9, 9, 3, -4, -10, 2, -10, -10]) 900))
(println (= (highest-product-of-three [7, 2, -2, -1, 2, 3, 5]) 105))
(println (= (highest-product-of-three [-5, -6, -8, -4]) -120))
(println (= (highest-product-of-three [4, -10, -2, 4, -5, 9, 2]) 450))
(println (= (highest-product-of-three [-7, 2, -1, 3]) 21))
(println (= (highest-product-of-three [-7, -6, 5, 3, -6, -8, 9]) 504))
(println (= (highest-product-of-three [-9, 8, -8]) 576))
(println (= (highest-product-of-three [-9, -8, -2, 2, 0, -9]) 162))
(println (= (highest-product-of-three [0, -6, 8, -5, -3, -9, -10]) 720))
(println (= (highest-product-of-three [-10, 9, 6, -3]) 270))
(println (= (highest-product-of-three [0, -7, -6, 9]) 378))
(println (= (highest-product-of-three [-2, 5, -2]) 20))
(println (= (highest-product-of-three [7, 0, 0, 0, -10, -9, -10, 5, 9]) 900))
(println (= (highest-product-of-three [5, -6, 2, 2, 4, 7]) 140))
(println (= (highest-product-of-three [-10, 6, 4, 6]) 144))
(println (= (highest-product-of-three [9, -5, -7, 3, -6, 2]) 378))
(println (= (highest-product-of-three [-6, 7, -5, 0, 1, 4, -6, -1]) 252))
(println (= (highest-product-of-three [7, -3, -3, 8, 3, -4, -2, 4, -6]) 224))
(println (= (highest-product-of-three [0, 8, -1, -3, 8, -3]) 72))
(println (= (highest-product-of-three [3, 9, -1, -10, 0]) 90))
(println (= (highest-product-of-three [-8, -9, -1, -9, -4]) -32))
(println (= (highest-product-of-three [-1, -7, -9, 7]) 441))
(println (= (highest-product-of-three [5, -9, -4, -2]) 180))
(println (= (highest-product-of-three [-7, 3, 7, -9, -3, 5, 0, -10]) 630))
(println (= (highest-product-of-three [-8, 6, 3]) -144))
(println (= (highest-product-of-three [1, 2, 6, 6, 0, -6, 8]) 288))
(println (= (highest-product-of-three [-7, 9, 2, 6, 4, -2, 0, 4]) 216))
(println (= (highest-product-of-three [7, 9, 3, 5, 4, 8, -1]) 504))
(println (= (highest-product-of-three [8, 2, -8, -4, -4, -1, -3]) 256))
(println (= (highest-product-of-three [7, 3, 5, -7, 2, -5, -8, 8, -4]) 448))
(println (= (highest-product-of-three [5, -9, 4, -6, 6]) 324))
(println (= (highest-product-of-three [-5, -6, 1, 0, 7, -2, -1, -8]) 336))
(println (= (highest-product-of-three [2, -5, 1, -1, -7, 0]) 70))
(println (= (highest-product-of-three [-1, 1, 4, -1]) 4))
(println (= (highest-product-of-three [0, -10, -3]) 0))
(println (= (highest-product-of-three [8, 0, 1, -2, 4, -2]) 32))
(println (= (highest-product-of-three [-10, -5, -8, -2, 1, -3, -10, -6, 6]) 600))
(println (= (highest-product-of-three [-3, -4, -10, 5, -10, 5, 0]) 500))
(println (= (highest-product-of-three [8, -3, 1, -1, 7, -1, 1, 0]) 56))
(println (= (highest-product-of-three [-5, -8, 9, 4]) 360))
(println (= (highest-product-of-three [-7, -2, -10, 9, 7, -8, -8]) 720))
(println (= (highest-product-of-three [-4, -2, -3, -1, 2]) 24))
(println (= (highest-product-of-three [-6, -4, 1, -2, -9, 9, -4, 5, -9]) 729))
(println (= (highest-product-of-three [1, -8, -4, 2]) 64))
(println (= (highest-product-of-three [-8, 4, 4, 2, 4]) 64))
(println (= (highest-product-of-three [6, -5, 2, 9, -3, 6, 5, -2]) 324))
(println (= (highest-product-of-three [-2, -6, 9, 8]) 108))
(println (= (highest-product-of-three [5, -3, -3, 0]) 45))
(println (= (highest-product-of-three [-1, 2, -4, -8, -10]) 160))
(println (= (highest-product-of-three [3, 3, -9, 6, -1, 9, -1]) 162))
(println (= (highest-product-of-three [8, -3, 0, -7, 2, -5, 6, 1]) 280))
(println (= (highest-product-of-three [7, 1, 8, 5]) 280))
(println (= (highest-product-of-three [-1, 1, 3, 6, 1, 4, -8]) 72))
(println (= (highest-product-of-three [7, -8, 5]) -280))
(println (= (highest-product-of-three [4, 7, 1]) 28))
(println (= (highest-product-of-three [-7, -7, -9]) -441))
(println (= (highest-product-of-three [-6, 5, 2, -8, -9, 3, 3]) 360))
(println (= (highest-product-of-three [5, -2, -2]) 20))
(println (= (highest-product-of-three [-10, -5, -2, -7, 5, -3, 9, -4]) 630))
(println (= (highest-product-of-three [-8, -7, 5]) 280))
(println (= (highest-product-of-three [1, 5, -6, 0, 7, -9, -4, 3]) 378))
(println (= (highest-product-of-three [-9, 1, 8, -5, 9, 2, -5]) 405))
(println (= (highest-product-of-three [6, -5, -4, 9, 3, 4, -4, 4]) 216))
(println (= (highest-product-of-three [-5, -8, 4, -1]) 160))
(println (= (highest-product-of-three [-7, -3, 1, -7, -1, 4, -1, 2]) 196))
(println (= (highest-product-of-three [-2, 5, 5, -6, -7]) 210))
(println (= (highest-product-of-three [1, 0, 1, -10, -1, -5, -9, -9]) 90))
(println (= (highest-product-of-three [8, -3, 5, 4, -6, 3, -7, 7, -1]) 336))
(println (= (highest-product-of-three [7, 5, -6]) -210))
(println (= (highest-product-of-three [-3, 0, 8, -2, 6, 4, -1]) 192))
(println (= (highest-product-of-three [6, 6, -10]) -360))
(println (= (highest-product-of-three [6, -2, -1, 6]) 12))
(println (= (highest-product-of-three [-3, 8, -10, 5, -5]) 400))
(println (= (highest-product-of-three [-2, 1, 5, -9, -8, -6, -9, 8, 5]) 648))
(println (= (highest-product-of-three [4, 4, 6, -6, 4, 8, -9, -1]) 432))
(println (= (highest-product-of-three [3, -10, 1, 8]) 24))
(println (= (highest-product-of-three [-4, -7, -5]) -140))
(println (= (highest-product-of-three [-5, 0, -3, 9, -7]) 315))
(println (= (highest-product-of-three [-7, 5, -4, -10, 6, 4, -9, -8]) 540))
(println (= (highest-product-of-three [-5, 9, -10, 7, 3, -6]) 540))
(println (= (highest-product-of-three [-6, -2, 0, 0, -3]) 0))
(println (= (highest-product-of-three [3, 8, -10, 2, -6, -3, 6, -1]) 480))
(println (= (highest-product-of-three [-8, -3, -4, -3]) -36))
(println (= (highest-product-of-three [6, 3, -8]) -144))
(println (= (highest-product-of-three [-3, 5, 0, -2, 5]) 30))
(println (= (highest-product-of-three [9, 5, -8, -2, 4]) 180))
(println (= (highest-product-of-three [4, -9, -4, -10, 7, 7, 7, -6, 6]) 630))
(println (= (highest-product-of-three [6, -2, 2, 2, -7, -2, 4]) 84))
(println (= (highest-product-of-three [8, -7, 6, 0, -3, 1]) 168))
(println (= (highest-product-of-three [4, 9, -6, 7, -1, -2, -5, 6]) 378))
(println (= (highest-product-of-three [-3, -2, 0, -3, 5, -2]) 45))
(println (= (highest-product-of-three [3, -8, -2, -5, -1]) 120))
(println (= (highest-product-of-three [-8, 4, -6, -7, 4, 1]) 224))
(println (= (highest-product-of-three [3, -1, -2, -5, 6, -9]) 270))
(println (= (highest-product-of-three [-1, 1, 3, -1]) 3))
(println (= (highest-product-of-three [0, -5, -10, 2]) 100))
(println (= (highest-product-of-three [5, -7, -6, 8, -2, -1, -9]) 504))
(println (= (highest-product-of-three [-9, 9, 1, 4, -4]) 324))
(println (= (highest-product-of-three [6, 0, -10, -6, 7, -7, -7, -2]) 490))
(println (= (highest-product-of-three [-3, -6, 7, -6, -2, 3, 4, -8]) 336))
(println (= (highest-product-of-three [0, -10, 6, 4, 6]) 144))
(println (= (highest-product-of-three [-6, 6, 0, 0, 1, -5, -5, 7]) 210))
(println (= (highest-product-of-three [-6, 5, -9, -2]) 270))
(println (= (highest-product-of-three [1, 2, -7, 4, 5, 8, -6]) 336))
(println (= (highest-product-of-three [-7, 1, 4, -3, -1, 9, -9, -10, 1]) 810))
(println (= (highest-product-of-three [4, -5, -2]) 40))
(println (= (highest-product-of-three [-10, 4, -5, 8, 3, 2]) 400))
(println (= (highest-product-of-three [-8, 5, -8, -5]) 320))
(println (= (highest-product-of-three [-5, 7, -8, -4, 9]) 360))
(println (= (highest-product-of-three [7, -1, 7]) -49))
(println (= (highest-product-of-three [7, 5, -7, -10, -5, 7, -6]) 490))
(println (= (highest-product-of-three [-2, -10, -2, -1]) -4))
(println (= (highest-product-of-three [-9, 7, -9, 3]) 567))
(println (= (highest-product-of-three [-3, 8, -1, -6, 0, 2, -5, 2, 2]) 240))
(println (= (highest-product-of-three [-4, 3, 8, -3, -4, -4, -8, -2]) 256))
(println (= (highest-product-of-three [-3, 9, -5, 6, 5, -7, 0, 3, -4]) 315))
(println (= (highest-product-of-three [0, -8, 1]) 0))
(println (= (highest-product-of-three [5, -8, -10]) 400))
(println (= (highest-product-of-three [4, -2, -5, -3]) 60))
(println (= (highest-product-of-three [-10, 6, 5, -8]) 480))
(println (= (highest-product-of-three [8, 4, 8, -3, -6, 0]) 256))
(println (= (highest-product-of-three [-6, 2, -8, 4, -4, 9, -5]) 432))
(println (= (highest-product-of-three [7, 3, 5, -10]) 105))
(println (= (highest-product-of-three [-2, 5, -2]) 20))
(println (= (highest-product-of-three [-9, -6, -7, 4, -1, -7, 3, -10]) 360))
(println (= (highest-product-of-three [0, -6, 9, -1, 7, 6, 1, -8]) 432))
(println (= (highest-product-of-three [-8, 8, 2, 4, 2, -6, 7]) 384))
(println (= (highest-product-of-three [-5, -8, -2, -3]) -30))
(println (= (highest-product-of-three [9, -5, -4, 8, 6, -7, 3, -4]) 432))
(println (= (highest-product-of-three [4, -10, 7, 0]) 0))
(println (= (highest-product-of-three [3, 6, 7, -8, -6, -10, -5, -1, -9]) 630))
(println (= (highest-product-of-three [5, -8, -5, -9, -7, -3, 3]) 360))
(println (= (highest-product-of-three [-6, 1, -7, -7]) 49))
(println (= (highest-product-of-three [1, -7, 2, 9, -1, 8, -2, -8]) 504))
(println (= (highest-product-of-three [-8, -10, 4, 3]) 320))
(println (= (highest-product-of-three [4, 8, -7, -1, 6, 1, 1]) 192))
(println (= (highest-product-of-three [6, -2, 0]) 0))
(println (= (highest-product-of-three [3, 3, 9, -3, 7, 1, -9, -8]) 648))
(println (= (highest-product-of-three [0, -10, 7]) 0))
(println (= (highest-product-of-three [-5, 8, -5]) 200))
(println (= (highest-product-of-three [3, -6, -6, -10, 8, 9, 8, 0, 8]) 576))
(println (= (highest-product-of-three [6, -1, 2, 6, -2, -2, -5, 6, -3]) 216))
(println (= (highest-product-of-three [6, -10, -8, -6, 4, -1, 7, 4]) 560))
(println (= (highest-product-of-three [-3, 1, 0]) 0))
(println (= (highest-product-of-three [-8, -8, -3, -6, 8, -10, -4, 5]) 640))
(println (= (highest-product-of-three [0, -4, -6, 0, -6, 4, 6, 7]) 252))
(println (= (highest-product-of-three [-10, 1, -2, -9]) 90))
(println (= (highest-product-of-three [3, 7, 8, 5, -6, 3]) 280))
(println (= (highest-product-of-three [-8, -8, -3, 6, 2, -5, -5]) 384))
(println (= (highest-product-of-three [4, -10, -3, 1, -8, -6]) 320))
(println (= (highest-product-of-three [-10, -4, -5, -7]) -140))
(println (= (highest-product-of-three [-7, 5, 6]) -210))
(println (= (highest-product-of-three [7, -9, -7]) 441))
(println (= (highest-product-of-three [-6, 2, 6, -7, 4, -9, 8]) 504))
(println (= (highest-product-of-three [-10, 7, -4, 0, -9, 7, 0, 7]) 630))
(println (= (highest-product-of-three [-2, 6, 0, 7, 6]) 252))
(println (= (highest-product-of-three [-10, -6, -3, 8, -2, -8, 3]) 640))
(println (= (highest-product-of-three [-2, 3, -2]) 12))
(println (= (highest-product-of-three [5, 4, -6, -9, -4]) 270))
(println (= (highest-product-of-three [3, 2, 7, -4]) 42))
(println (= (highest-product-of-three [-4, -6, 7, 9, -6, 3]) 324))
(println (= (highest-product-of-three [0, -9, 3, -1, -2]) 54))
(println (= (highest-product-of-three [-10, -7, 0, -4, 2, -3, -7, 0, 6]) 420))
(println (= (highest-product-of-three [7, 4, 5, 3, 4, -9]) 140))
(println (= (highest-product-of-three [6, 8, 8, -4, -8, 1, -5, 7]) 448))
(println (= (highest-product-of-three [-3, -7, 0]) 0))
(println (= (highest-product-of-three [4, 5, 0]) 0))
(println (= (highest-product-of-three [8, 1, 8]) 64))
(println (= (highest-product-of-three [-6, 0, 3, 3]) 0))
(println (= (highest-product-of-three [8, 4, -10, 5, -4]) 320))
(println (= (highest-product-of-three [-1, 7, 5, -3, -8, 8]) 280))
(println (= (highest-product-of-three [4, 0, 1, -6, -6, 5, 5, 3, 1]) 180))
(println (= (highest-product-of-three [-1, -1, -10, -1, 9, -5, 1]) 450))
(println (= (highest-product-of-three [1, -1, -10, -3, 4]) 120))
(println (= (highest-product-of-three [-7, -3, -1, 4, -5, -6, 1, 8]) 336))
(println (= (highest-product-of-three [1, -10, 5, 1, -3]) 150))
(println (= (highest-product-of-three [-4, 4, -3]) 48))
(println (= (highest-product-of-three [0, 7, 0, 0, 0, 0, 6, -2]) 0))
(println (= (highest-product-of-three [5, -10, -5, -7, -10]) 500))
(println (= (highest-product-of-three [-6, -1, -8]) -48))
(println (= (highest-product-of-three [-6, 2, 6, -8, -2]) 288))
(println (= (highest-product-of-three [-2, 6, -1, 0, 2]) 12))
(println (= (highest-product-of-three [-3, -3, 7, 5, -5, -7]) 245))
(println (= (highest-product-of-three [7, 2, 5, -5, -1, 6, 1, -6, -4]) 210))
(println (= (highest-product-of-three [-7, 1, -4, -3, 5, -9, -7]) 315))
(println (= (highest-product-of-three [4, -3, 2, 7, -5, 5, 1, 3, 8]) 280))
(println (= (highest-product-of-three [8, 5, -1, 6, -9, 1, 7]) 336))
(println (= (highest-product-of-three [-9, 7, -9, -2, -4, 9, -8]) 729))
(println (= (highest-product-of-three [6, -2, -6, -2, -8]) 288))
(println (= (highest-product-of-three [-9, -8, 3, -9, 7, -1, -2, 5, 5]) 567))
(println (= (highest-product-of-three [-8, -7, -9, -7, 0, 8, 1, -7]) 576))
(println (= (highest-product-of-three [-9, -3, -8, 5, 9, 8, 6, -8]) 648))
(println (= (highest-product-of-three [-9, -1, -3, -10, -6, 2]) 180))
(println (= (highest-product-of-three [-5, 8, -8]) 320))
(println (= (highest-product-of-three [-2, -10, -2, -5, 2, 3, -10, -2]) 300))
(println (= (highest-product-of-three [8, 4, 4, -9, 8, -9, 1, -6]) 648))
(println (= (highest-product-of-three [9, 7, 0, 2, -7]) 126))
(println (= (highest-product-of-three [-6, 1, -8, -6, 4, -6, -4, 4, 0]) 192))
(println (= (highest-product-of-three [8, 4, 6, 9]) 432))
(println (= (highest-product-of-three [-5, 9, -1]) 45))
(println (= (highest-product-of-three [-10, 1, -7]) 70))
(println (= (highest-product-of-three [4, 0, 2, 4, 0, -10]) 32))
(println (= (highest-product-of-three [-1, 8, 5, -3, -3, -9, -6, 2]) 432))
(println (= (highest-product-of-three [-9, 7, -8]) 504))
(println (= (highest-product-of-three [8, -4, -2, 3, 4]) 96))
(println (= (highest-product-of-three [4, 7, 4, -5]) 112))
(println (= (highest-product-of-three [-8, 6, 6, 9, 7, -6, 1, 8]) 504))
(println (= (highest-product-of-three [-5, -10, 7, 1, -7, -4, 0, -10, 0]) 700))
(println (= (highest-product-of-three [6, 8, 4, 9, 8, -10, 4]) 576))
(println (= (highest-product-of-three [2, 7, 8, 4, -5, -7]) 280))
(println (= (highest-product-of-three [-8, 7, 5, 0, 3, -3, -1, 4, 1]) 168))
(println (= (highest-product-of-three [7, -7, -10, 9, -3, 4, 3, -9, -3]) 810))
(println (= (highest-product-of-three [-5, 2, 3, -9, 9, -5]) 405))
(println (= (highest-product-of-three [3, 5, 5]) 75))
(println (= (highest-product-of-three [7, 9, 6, 1, -4, 5]) 378))
(println (= (highest-product-of-three [1, -10, -5]) 50))
(println (= (highest-product-of-three [-4, 8, -4, -7, -5, -1, -7, -5]) 392))
(println (= (highest-product-of-three [3, -5, -3, 0, -6, -8, -6]) 144))
(println (= (highest-product-of-three [-4, -3, 8, -3, 6, 1, 3, -6]) 192))
(println (= (highest-product-of-three [-7, 9, 4, -10, -4, 8]) 630))
(println (= (highest-product-of-three [9, 1, 4, 3]) 108))
(println (= (highest-product-of-three [-9, 7, 5, -9, -6]) 567))
(println (= (highest-product-of-three [4, -1, 4, 5, -2, -3, -10]) 150))
(println (= (highest-product-of-three [9, 9, -8, -7, 0, -8]) 576))
(println (= (highest-product-of-three [9, 0, -4, -9, 4]) 324))
(println (= (highest-product-of-three [0, -4, 2, -6, 7, 9, 4, -6, 4]) 324))
(println (= (highest-product-of-three [-4, 9, -9]) 324))
(println (= (highest-product-of-three [3, -4, -2, -2, -2, 0, 3, 1, 0]) 24))
(println (= (highest-product-of-three [0, 3, 4]) 0))
(println (= (highest-product-of-three [-2, 3, -6, 9]) 108))
(println (= (highest-product-of-three [-8, -5, -5, -8, 7, -10]) 560))
(println (= (highest-product-of-three [-1, -5, 0, -3, 7, -8, -9]) 504))
(println (= (highest-product-of-three [-9, 0, -6, -2, -5, 6, -6, -8]) 432))
(println (= (highest-product-of-three [-4, -2, 0, 4, 3]) 32))
(println (= (highest-product-of-three [9, 2, 3, 9, 3, -1, 2, -2, 0]) 243))
(println (= (highest-product-of-three [1, -7, 9, 2, -3, -5]) 315))
(println (= (highest-product-of-three [-3, 9, 2]) -54))
(println (= (highest-product-of-three [7, 5, -6, 2, -5, -7, 4, -7]) 343))
(println (= (highest-product-of-three [8, 8, 6]) 384))
(println (= (highest-product-of-three [-6, -3, 9, -10, -2, -2, 7, -7, -3]) 630))
(println (= (highest-product-of-three [-2, -10, 7, -7, -5]) 490))
(println (= (highest-product-of-three [-7, 7, -10, -5, 0, 1]) 490))
(println (= (highest-product-of-three [-2, -9, 8, -10, 3, -2, -6, 9]) 810))
(println (= (highest-product-of-three [-3, -4, 6]) 72))
(println (= (highest-product-of-three [-1, 0, 1, -8]) 8))
(println (= (highest-product-of-three [-4, 7, -10, 5, -2, 4, -5, -5, 9]) 450))
(println (= (highest-product-of-three [-5, -9, -2, -4, 0]) 0))
(println (= (highest-product-of-three [5, 5, 7, 7, 4, 0, -9, -3, 2]) 245))
(println (= (highest-product-of-three [4, 1, -7, 5, 7]) 140))
(println (= (highest-product-of-three [-6, 0, -8]) 0))
(println (= (highest-product-of-three [-9, 1, -2]) 18))
(println (= (highest-product-of-three [6, -10, 7]) -420))
(println (= (highest-product-of-three [-2, 4, -5, -10]) 200))
(println (= (highest-product-of-three [-3, 2, 0]) 0))
(println (= (highest-product-of-three [-5, -5, 3, 5, 8]) 200))
(println (= (highest-product-of-three [4, 6, -10, -9, 2]) 540))
(println (= (highest-product-of-three [1, -5, -4, 1, 5]) 100))
(println (= (highest-product-of-three [-8, -8, 6, 4, -8, -6, -6]) 384))
(println (= (highest-product-of-three [3, -4, 6, -1, 2, 2, 0, -9]) 216))
(println (= (highest-product-of-three [-2, -5, -5]) -50))
(println (= (highest-product-of-three [-5, -9, -6]) -270))
(println (= (highest-product-of-three [-8, -7, -2]) -112))
(println (= (highest-product-of-three [-5, 3, 2, 8, -2, -4, -1, 0, 3]) 160))
(println (= (highest-product-of-three [-6, 6, 4, -2, 1]) 72))
(println (= (highest-product-of-three [0, -10, -6, 9, -9, -10, -9, 7]) 900))
(println (= (highest-product-of-three [5, 4, 7, -9, 8, -2, 0]) 280))
(println (= (highest-product-of-three [-6, 9, 1, -2]) 108))
(println (= (highest-product-of-three [-5, 2, 2, 2, 5]) 20))
(println (= (highest-product-of-three [-1, -5, 0]) 0))
(println (= (highest-product-of-three [4, -3, -2, 8, 4, -3, 2]) 128))
(println (= (highest-product-of-three [-5, 4, 8, 7, -3, -1, -4, -7, -1]) 280))
(println (= (highest-product-of-three [-7, -1, -2, -3, 2]) 42))
(println (= (highest-product-of-three [-4, -5, -5, -1, -2]) -8))
(println (= (highest-product-of-three [-8, -4, 1, -1, -3, 0, -4, 7, 9]) 288))
(println (= (highest-product-of-three [4, 2, -2]) -16))
(println (= (highest-product-of-three [5, 1, 0]) 0))
(println (= (highest-product-of-three [-1, -3, -5, 7, 5, 8, 8, 5]) 448))
(println (= (highest-product-of-three [9, -3, 2, 8, 3, -6, -9, 9, -5]) 648))
(println (= (highest-product-of-three [-8, 3, -9]) 216))
(println (= (highest-product-of-three [-4, -1, 3, -1, -5, 2, -6, -3, 7]) 210))
(println (= (highest-product-of-three [5, 8, -7, -10, 1, -10, -6, -2, 4]) 800))
(println (= (highest-product-of-three [-10, -3, -8, -3]) -72))
(println (= (highest-product-of-three [3, 0, 3, 2, -6, 3, -5]) 90))
(println (= (highest-product-of-three [0, 8, 3, -10, -6, -2, 2, -2]) 480))
(println (= (highest-product-of-three [-5, -6, -9, -10, -7, -2, -9]) -60))
(println (= (highest-product-of-three [0, 3, 8, -8, -5, -5]) 320))
(println (= (highest-product-of-three [-10, 5, 5, 9, -2, -8]) 720))
(println (= (highest-product-of-three [-7, -6, 0]) 0))
(println (= (highest-product-of-three [-9, -8, -2, -4, -5, -6]) -40))
(println (= (highest-product-of-three [3, -1, 4, 3, 2]) 36))
(println (= (highest-product-of-three [-7, -5, -7]) -245))
(println (= (highest-product-of-three [-3, 1, -8, 8, 2, -2]) 192))
(println (= (highest-product-of-three [-4, 1, 5, -5]) 100))
(println (= (highest-product-of-three [-8, 2, 5]) -80))
(println (= (highest-product-of-three [-5, 9, -1]) 45))
(println (= (highest-product-of-three [7, -1, -1, 1]) 7))
(println (= (highest-product-of-three [-9, -2, 7, 1, -5, 5, 9, 3]) 405))
(println (= (highest-product-of-three [-4, 0, -4, 1, -1, 4, -9, 1]) 144))
(println (= (highest-product-of-three [7, -9, 2, -3]) 189))
(println (= (highest-product-of-three [-4, 7, 6, 0, 8, -7]) 336))
(println (= (highest-product-of-three [-9, -5, -7]) -315))
(println (= (highest-product-of-three [4, -2, 1, 7, 4, -4, -7]) 196))
(println (= (highest-product-of-three [4, 0, -6, 5, -3, 9, 8, 7]) 504))
(println (= (highest-product-of-three [5, 5, 8, 8, 4, 2, -10, -4, -7]) 560))
(println (= (highest-product-of-three [-2, -2, 0, 6]) 24))
(println (= (highest-product-of-three [2, -4, 0]) 0))
(println (= (highest-product-of-three [6, -3, -4, 1, -10, -5, 3]) 300))
(println (= (highest-product-of-three [-2, 4, -1, -1]) 8))
(println (= (highest-product-of-three [-1, -6, -9, 0, -1, -6, -9, 5]) 405))
(println (= (highest-product-of-three [-8, -10, -6, -3, -8]) -144))
(println (= (highest-product-of-three [9, 8, -9, 0, 4]) 288))
(println (= (highest-product-of-three [0, -1, -1, 5, 9, 6]) 270))
(println (= (highest-product-of-three [0, -7, 9, 5, 9, -1, 5, -9]) 567))
(println (= (highest-product-of-three [-2, 8, 4, 5, -2, 2, -8, 6]) 240))
(println (= (highest-product-of-three [8, -5, -1, 7, -10, -1]) 400))
(println (= (highest-product-of-three [7, 6, -1, -3, 5, 7, -1, 8]) 392))
(println (= (highest-product-of-three [3, -4, 3, 1, -10, 4, -2]) 160))
(println (= (highest-product-of-three [-3, -5, 6, 3]) 90))
(println (= (highest-product-of-three [4, -3, 3, 5, 0, -10]) 150))
(println (= (highest-product-of-three [-1, 0, -2, -4, -4, 1, 2, -2]) 32))
(println (= (highest-product-of-three [-7, 9, -10, 0, 7, 0, 6, -5, 6]) 630))
(println (= (highest-product-of-three [8, -4, -7]) 224))
(println (= (highest-product-of-three [0, 0, 3, 1, -8, -2, -1, -8]) 192))
(println (= (highest-product-of-three [4, -3, 4, 3, -9]) 108))
(println (= (highest-product-of-three [2, -1, -1, 1, 9, 7, -10]) 126))
(println (= (highest-product-of-three [-10, 9, -7, -2, 0, -8]) 720))
(println (= (highest-product-of-three [-6, -4, -2, -8]) -48))
(println (= (highest-product-of-three [3, -1, 4]) -12))

